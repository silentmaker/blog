webpackJsonp([0xa12cafa1e28d],{449:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Elvin's Blog",author:"Elvin Ma"}},markdownRemark:{id:"/Users/maxingcong/Code/blog/src/pages/Javascript忍者禁术笔记-Object.md absPath of file >>> MarkdownRemark",html:'<h3>原型链</h3>\n<p>原型是JS中的一个基本概念，所有的对象包括Object、Function、Array和Map等都有原型，原型能过prototype的引用指用其他对象，从而形成了原型链，对象的属性和方法可以通过原型链委托给其他对象，从而使得JS具有了模拟继承的能力</p>\n<p><img src="F:%5Cprojects%5Cblog%5Csrc%5Cpages%5Cimages%5Cproperty-search.png" alt="Searching Property"></p>\n<p>可以能过直接赋值Obj.prototype和Object.setPrototypeOf 来修改对象的原型，在JS运行时环境中，JS引擎通过对象实例的[[prototype]]属性追踪原型链，如下图是将Person函数指定为Ninja函数的原型：</p>\n<p><img src="F:%5Cprojects%5Cblog%5Csrc%5Cpages%5Cimages%5Cobject-prototype.png" alt="Object Prototype"></p>\n<h3>属性描述符</h3>\n<p>对于对象的一个具体属性，都会有对应的属性描述符：</p>\n<ul>\n<li>configurable，为false时，属性描述符不可修改，并且属性不可删除</li>\n<li>enumerable，为false时，属性是不可枚举的，不会出现在for…in循环里</li>\n<li>value，指定属性的值，默认为undefined</li>\n<li>writable，为false，属性不可以重新赋值</li>\n<li>get，访问属性用的回调函数，不可与value和writable冲突</li>\n<li>set，设置属性用的回调函数，不可与value和writable冲突</li>\n</ul>\n<p>正常地直接赋值时，比如<code class="language-text">ninja.name = &quot;Yoshi&quot;;</code>，name对应的属性描述符情况是，configurable、writable和enumerable为true，value为”Yoshi”，get和set为undefined</p>\n<p>而执行<code class="language-text">var ninja = new Ninja</code>的时候，会执行Ninja.constructor来生成新对象，ninja.constructor 会等于 Ninja，但是如果先将new Person()设为Ninja的原型，ninja.constructor 会变成 Person，因为实例才有的constructor属性始终指向的是创建本身的构造函数，这时如果显式地去调用Ninja实例的构造函数来生成对象就只能得到Person对象，可以通过属性描述符来防止construtor被覆盖的问题：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nPerson<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nNinja<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Ninja<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    value<span class="token punctuation">:</span> Ninja<span class="token punctuation">,</span>\n    writable<span class="token punctuation">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> ninja <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> Ninja<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 只能枚举出dance</span></code></pre>\n      </div>\n<p>对象的静态方法是不用实例化也可以调用的方法：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Ninja</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">compare</span><span class="token punctuation">(</span>ninja1<span class="token punctuation">,</span> ninja2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> ninja1<span class="token punctuation">.</span>level <span class="token operator">-</span> ninja2<span class="token punctuation">.</span>level<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ES5 写法</span>\n<span class="token keyword">function</span> <span class="token function">Ninja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\nNinja<span class="token punctuation">.</span><span class="token function-variable function">compare</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>计算属性和私有属性</h3>\n<p>get/set 只能通过 Object.defineProperty 或者对象字面量来定义，可以用于实现computed属性：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ninjaCollection <span class="token operator">=</span> <span class="token punctuation">{</span>\n    ninjas<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Yoshi"</span><span class="token punctuation">,</span> <span class="token string">"Kuma"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token keyword">get</span> <span class="token function">firstNinja</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ninjas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">set</span> <span class="token function">firstNinja</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>ninjas<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>也可以用于实现私有属性：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> Ninja <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> _level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">\'level\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_level<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>_level <span class="token operator">=</span> val<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>JS中的特殊对象如Array、Map、Set 和 Proxy 等可以参见 MDN</p>',frontmatter:{title:"Javascript忍者禁术笔记-Object",tags:["Javascript"],categories:["编程"],date:"April 15, 2017"}}},pathContext:{slug:"/Javascript忍者禁术笔记-Object/",previous:{fields:{slug:"/Javascript忍者禁术笔记-Function/"},frontmatter:{path:"/javascript-ninja-function",title:"Javascript忍者禁术笔记-Function",tags:["Javascript"],categories:["编程"]}},next:{fields:{slug:"/内存管理与垃圾回收/"},frontmatter:{path:"/js-memory-management",title:"内存管理与垃圾回收",tags:["Javascript"],categories:["编程"]}}}}}});
//# sourceMappingURL=path---javascript忍者禁术笔记-object-38e983a0da97df265b0e.js.map