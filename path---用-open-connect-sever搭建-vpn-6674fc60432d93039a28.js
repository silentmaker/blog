webpackJsonp([0xf349d2701cf6],{521:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Elvin's Blog",author:"Elvin Ma"}},markdownRemark:{id:"/Users/maxingcong/Code/blog/src/pages/用OpenConnectSever搭建VPN.md absPath of file >>> MarkdownRemark",html:'<p>首先需要购置一台VPN用主机和自用域名，将域名 DOMAIN 的 A/AAAA 记录指向该主机，安装nginx并启动，主机推荐腾讯云香港区域的S1系列（CentOS）</p>\n<h3>Let’s Encrypt</h3>\n<p>为了内容传输的隐密性，可以采用 Let’s Encrypt 来获取合法的服务器证书，自建 CA 并签发服务器证书固然是可行方案，但需要在每台设备上都信任该自建 CA，较为麻烦且不安全</p>\n<p>TLS/SSL 协议的允许连接双方都对端做身份认证，对服务器端认证一般采用证书认证的，客户端认证一般采用用户名+密码的认证，也可以采用证书认证的方式</p>\n<p><strong>获取证书</strong></p>\n<p>测试时建议加上 —test-cert 以免用完 Let’s Encrypt 的证书获取速率限制</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yum <span class="token function">install</span> letsencrypt\nletsencrypt certonly // 为DOMAIN申请证书</code></pre>\n      </div>\n<p><strong>自动更新证书</strong></p>\n<p>添加以下 cron 脚本至 /etc/cron.monthly/certbot，实现每月自动更新</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>\nWD<span class="token operator">=</span><span class="token string">"/root/certbot"</span>\nLOG<span class="token operator">=</span><span class="token string">"<span class="token variable">${WD}</span>/cron.log"</span>\n<span class="token function">mkdir</span> -p <span class="token variable">$WD</span>\n<span class="token function">date</span> <span class="token operator">>></span> <span class="token variable">$LOG</span>\ncertbot renew <span class="token operator">>></span> <span class="token variable">$LOG</span></code></pre>\n      </div>\n<p><strong>生成用户证书</strong></p>\n<p>用户证书只需 ocserv 信任 CA 即可，因此可以使用自建 CA 签发证书，将以下脚本保存到 /etc/ocserv/certs/，然后运行 <code class="language-text">./ocm generate USERNAME</code> 即可直接生成用户证书 USERNAME.p12</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>\n\ninit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    WORK<span class="token operator">=</span><span class="token string">"./work"</span>\n    CA_TMPL<span class="token operator">=</span><span class="token string">"<span class="token variable">${WORK}</span>/ca.tmpl"</span>\n    CA_KEY<span class="token operator">=</span><span class="token string">"<span class="token variable">${WORK}</span>/ca-key.pem"</span>\n    CA_CERT<span class="token operator">=</span><span class="token string">"./ca.pem"</span>\n    USER<span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>\n    USER_TMPL<span class="token operator">=</span><span class="token string">"<span class="token variable">${WORK}</span>/<span class="token variable">${USER}</span>.tmpl"</span>\n    USER_KEY<span class="token operator">=</span><span class="token string">"<span class="token variable">${WORK}</span>/<span class="token variable">${USER}</span>-key.pem"</span>\n    USER_CERT<span class="token operator">=</span><span class="token string">"<span class="token variable">${WORK}</span>/<span class="token variable">${USER}</span>.pem"</span>\n    USER_P12<span class="token operator">=</span><span class="token string">"./<span class="token variable">${USER}</span>.p12"</span>\n    REVOKED_CERT<span class="token operator">=</span><span class="token string">"<span class="token variable">${WORK}</span>/revoked.pem"</span>\n    CRL_TMPL<span class="token operator">=</span><span class="token string">"<span class="token variable">${WORK}</span>/crl.tmpl"</span>\n    CRL_CERT<span class="token operator">=</span><span class="token string">"./crl.pem"</span>\n\n    <span class="token comment"># Ensure working directory</span>\n    <span class="token punctuation">[</span><span class="token punctuation">[</span> -d <span class="token variable">$WORK</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">mkdir</span> -p <span class="token variable">$WORK</span>\n\n    <span class="token comment"># CA Template</span>\n    <span class="token punctuation">[</span><span class="token punctuation">[</span> -f <span class="token variable">$CA_TMPL</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> _EOF_ <span class="token operator">></span> <span class="token variable">$CA_TMPL</span>\ncn <span class="token operator">=</span> <span class="token string">"VPN CA"</span>\nserial <span class="token operator">=</span> 1\nexpiration_days <span class="token operator">=</span> 3650\nca\nsigning_key\ncert_signing_key\ncrl_signing_key\n_EOF_\n\n    <span class="token comment"># CA Private Key</span>\n    <span class="token punctuation">[</span><span class="token punctuation">[</span> -f <span class="token variable">$CA_KEY</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> certtool --generate-privkey --outfile <span class="token variable">$CA_KEY</span>\n\n    <span class="token comment"># CA Certificate</span>\n    <span class="token punctuation">[</span><span class="token punctuation">[</span> -f <span class="token variable">$CA_CERT</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> certtool --generate-self-signed --load-privkey <span class="token variable">$CA_KEY</span> --template <span class="token variable">$CA_TMPL</span> --outfile <span class="token variable">$CA_CERT</span>\n<span class="token punctuation">}</span>\n\ngenerate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment"># User Template</span>\n    <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> _EOF_ <span class="token operator">></span> <span class="token variable">$USER_TMPL</span>\ncn <span class="token operator">=</span> <span class="token string">"<span class="token variable">$USER</span>"</span>\nexpiration_days <span class="token operator">=</span> 3650\nsigning_key\ntls_www_client\n_EOF_\n\n    <span class="token comment"># User Private Key</span>\n    certtool --generate-privkey --outfile <span class="token variable">$USER_KEY</span>\n\n    <span class="token comment"># User Certificate</span>\n    certtool --generate-certificate --load-privkey <span class="token variable">$USER_KEY</span> --load-ca-certificate <span class="token variable">$CA_CERT</span> --load-ca-privkey <span class="token variable">$CA_KEY</span> --template <span class="token variable">$USER_TMPL</span> --outfile <span class="token variable">$USER_CERT</span>\n\n    <span class="token comment"># Export User Certificate</span>\n    certtool --to-p12 --pkcs-cipher 3des-pkcs12 --load-privkey <span class="token variable">$USER_KEY</span> --load-certificate <span class="token variable">$USER_CERT</span> --outfile <span class="token variable">$USER_P12</span> --outder\n<span class="token punctuation">}</span>\n\nrevoke<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment"># Copy User Certificate to Revoked Certificate</span>\n    <span class="token function">cat</span> <span class="token variable">$USER_CERT</span> <span class="token operator">>></span> <span class="token variable">$REVOKED_CERT</span>\n\n    <span class="token comment"># CRL Template</span>\n    <span class="token punctuation">[</span><span class="token punctuation">[</span> -f <span class="token variable">$CRL_TMPL</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> _EOF_ <span class="token operator">></span> <span class="token variable">$CRL_TMPL</span>\ncrl_next_update <span class="token operator">=</span> 3650\ncrl_number <span class="token operator">=</span> 1\n_EOF_\n\n    <span class="token comment"># CRL Certificate</span>\n    certtool --generate-crl --load-certificate <span class="token variable">$REVOKED_CERT</span> --load-ca-privkey <span class="token variable">$CA_KEY</span> --load-ca-certificate <span class="token variable">$CA_CERT</span> --template <span class="token variable">$CRL_TMPL</span> --outfile <span class="token variable">$CRL_CERT</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>\n    generate<span class="token punctuation">)</span>\n        init <span class="token variable">$2</span>\n        generate\n        <span class="token punctuation">;</span><span class="token punctuation">;</span>\n    revoke<span class="token punctuation">)</span>\n        init <span class="token variable">$2</span>\n        revoke\n        <span class="token punctuation">;</span><span class="token punctuation">;</span>\n    *<span class="token punctuation">)</span>\n        <span class="token keyword">echo</span> <span class="token string">"\\\nUsage:\n    <span class="token variable">$0</span> generate USER\n    <span class="token variable">$0</span> revoke USER\n"</span>\nesac</code></pre>\n      </div>\n<h3>ocserv</h3>\n<p><strong>安装 &#x26; 配置</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">yum <span class="token function">install</span> ocserv</code></pre>\n      </div>\n<p>复制配置文件：cp /opt/ocserv-${VERSION}/doc/sample.config /etc/ocserv/ocserv.conf\n并修改以下项：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash"><span class="token comment"># 打开 PMTUD</span>\ntry-mtu-discovery <span class="token operator">=</span> <span class="token boolean">true</span>\n\n<span class="token comment"># 以 CN 为用户 ID。（用户证书认证）</span>\ncert-user-oid <span class="token operator">=</span> 2.5.4.3\n\n<span class="token comment"># 服务器证书与密钥（Let\'s Encrypt）</span>\nserver-cert <span class="token operator">=</span> /etc/letsencrypt/live/DOMAIN/fullchain.pem\nserver-key <span class="token operator">=</span> /etc/letsencrypt/live/DOMAIN/privkey.pem\n\n<span class="token comment"># 如有需要，可修改 VPN 端口</span>\ntcp-port <span class="token operator">=</span> 443\nudp-port <span class="token operator">=</span> 443\n\n<span class="token comment"># 修改 VPN 子网网段（避免和常用内网网段相同）</span>\nipv4-network <span class="token operator">=</span> 192.168.111/24\n\n<span class="token comment"># 修改 DNS</span>\ndns <span class="token operator">=</span> 8.8.8.8\ndns <span class="token operator">=</span> 8.8.4.4\n\n<span class="token comment"># 注释掉所有的 route，让服务器成为 gateway</span>\n<span class="token comment"># route = 192.168.1.0/255.255.255.0</span></code></pre>\n      </div>\n<p>配置防火墙和 IP Forwarding：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s 10.12.0.0/24 -o eth0 -j MASQUERADE\niptables -A FORWARD -s 10.12.0.0/24 -j ACCEPT\n\nf （net.ipv4.ip_forward<span class="token operator">=</span>1）\nsysctl -p /etc/sysctl.conf</code></pre>\n      </div>\n<p><strong>测试连接</strong></p>\n<p>修改 ocserv.conf 中的<code class="language-text">auth = &quot;plain[passwd=/etc/ocserv/passwd]&quot;</code>，并通过 ocpasswd 创建用户</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">ocpasswd -c /etc/ocserv/passwd your-username</code></pre>\n      </div>\n<p>运行<code class="language-text">ocserv ocserv -f -d 1</code>，在手机上通过 AnyConnect 尝试连接。</p>\n<p><strong>配置证书认证</strong></p>\n<p>修改 /etc/ocserv/ocserv.conf 中的以下项：</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">auth <span class="token operator">=</span> <span class="token string">"certificate"</span>\nca-cert <span class="token operator">=</span> /etc/ocserv/certs/ca-cert.pem</code></pre>\n      </div>\n<p>重新测试连接</p>\n<p><strong>安装用户证书</strong></p>\n<ol>\n<li>将生成的用户证书 USER.p12 复制到 nginx 的 WEBROOT</li>\n<li>打开 AnyConnect 客户端，切换到 Diagnostics - Certificates - Import User Certiticate…</li>\n<li>输入 <a href="http://DOMAIN/USER.p12%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81">http://DOMAIN/USER.p12，然后输入密码</a></li>\n<li>新建连接即可，地址为DOMAIN:443</li>\n</ol>',frontmatter:{title:"OpenConnectSever搭建VPN总结",tags:["VPN","Web"],categories:["编程"],date:"January 26, 2018"}}},pathContext:{slug:"/用OpenConnectSever搭建VPN/",previous:{fields:{slug:"/如何实现javascript的私有变量/"},frontmatter:{path:"/javascript-private-variables",title:"如何实现javascript的私有变量",tags:["javascript"],categories:["编程"]}},next:{fields:{slug:"/P5.js和贪吃蛇游戏/"},frontmatter:{path:"/build-snake-game-with-p5-js",title:"P5.js和贪吃蛇游戏",tags:["javascript","Game"],categories:["编程"]}}}}}});
//# sourceMappingURL=path---用-open-connect-sever搭建-vpn-6674fc60432d93039a28.js.map