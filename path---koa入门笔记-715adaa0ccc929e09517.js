webpackJsonp([52118030547426],{460:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Elvin's Blog",author:"Elvin Ma"}},markdownRemark:{id:"/Users/maxingcong/Code/blog/src/pages/Koa入门笔记.md absPath of file >>> MarkdownRemark",html:'<p>Koa是Express的维护者们基于更简洁稳定和更充分利用Async/Await异步模式的目标重写的web框架，不自带任何中间件，Koa本身可以看作对http库的一层封装，一个Koa应用的开发可以理解为一系列中间件的组合</p>\n<h3>级联中间件</h3>\n<p>当中间件用异步方式调用next()，其执行会暂停，将控制交给下一个中间件，一直到response中间件，然后再从执行堆栈中逐一展开和恢复之前中间件的执行</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'koa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> rt <span class="token operator">=</span> ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'X-Response-Time\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ctx<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> time <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>\n    ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'X-Response-Time\'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">\'Hello World\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>App 实例</h3>\n<p><strong>app.env</strong>，默认为NODE_ENV或者development</p>\n<p><strong>app.proxy</strong>，为true时表示Proxy Header可依赖</p>\n<p><strong>app.listen</strong>，语法糖</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 等价于</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhttp<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>所以如果要同时配置http和https则可以:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'http\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'https\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'koa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhttp<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>\nhttps<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p><strong>app.callback</strong>，返回适用于createServer的系列回调函数，也可以用于把koa应用挂载到connect/express的应用上 </p>\n<p><strong>app.use</strong>，用于添加中间件 </p>\n<p><strong>app.keys</strong>，用于设置已签名的cookie密钥，底层用的是jed/keygrip，可以传数组或者Keygrip对象，keys可以轮换，当signed: true的时候被使用</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token string">\'tobi\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> signed<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><strong>app.context</strong>，是中间件回调形参ctx的prototype，可以用于添加全局属性或方法，比如数据库</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span>context<span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> ctx <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p><strong>app.on(‘error’)</strong>，错误处理，默认情况下error会输出到标准错误输出stderr，除非err.status是404或者err.expose为true</p>\n<h3>Context 请求上下文</h3>\n<p>每个请求会对应生成一个context，并在中间件的回调中被引用，方便起见，很多访问器和方法委托给了ctx.request 和 ctx.response 这两个对象，比如 ctx.type 和 ctx.length 委托给了 response，ctx.path 和 ctx.method委托给了 request</p>\n<p><strong>ctx.req/ctx.res</strong>，Node的request和response对象 </p>\n<p><strong>ctx.request/ctx.response</strong>，Koa的Request和Response对象 </p>\n<p><strong>ctx.state</strong>，用于传递公共信息的推荐命名空间，如用户信息 </p>\n<p><strong>ctx.app</strong>，应用实例引用 </p>\n<p><strong>ctx.cookies.get/set</strong>，cookie的读写，底层用的是jed/cookies </p>\n<p><strong>ctx.throw</strong>，常见出错响应，底层用的是jshttp/http-errors </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">\'name required\'</span>，<span class="token punctuation">{</span>user<span class="token punctuation">:</span> user<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 等价于</span>\n<span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'name required\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nerr<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>\nerr<span class="token punctuation">.</span>expose <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">throw</span> err</code></pre>\n      </div>\n<p>err.expose为true，意味着这是适用于客户端响应的出错信息</p>\n<p><strong>ctx.assert</strong>，类似ctx.throw的语法糖，底层用的是jshttp/http-assert，当 !value 时，Helper 方法抛出类似于 .throw() 的错误 </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">\'unlogin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h3>Response</h3>\n<p>response.body 只能是以下几种：string、Buffer、Stream、Object/Array和null</p>\n<p>response.status 默认为200/204</p>\n<p>response.redirect(url, [alt])，执行302跳转</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">\'back\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 跳转回Refferer，没有的话使用alt或者/</span>\nctx<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">\'/login\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>response.body 的变更要在 response.redirect 之后</p>',frontmatter:{title:"Koa入门笔记",tags:["Javascript"],categories:["编程"],date:"November 29, 2018"}}},pathContext:{slug:"/Koa入门笔记/",previous:{fields:{slug:"/关于学习和实践/"},frontmatter:{path:"/thoughts-on-learning",title:"关于学习积累的一些思考",tags:["学习"],categories:["随笔"]}},next:{fields:{slug:"/Vue项目结构总结/"},frontmatter:{path:"/vue-project-structure",title:"Vue项目结构总结",tags:null,categories:["编程"]}}}}}});
//# sourceMappingURL=path---koa入门笔记-715adaa0ccc929e09517.js.map