{"version":3,"sources":["webpack:///path---generator与async-iterator-f2dc7683ba380b9d2952.js","webpack:///./.cache/json/generator与async-iterator.json"],"names":["webpackJsonp","444","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,sGAAAC,KAAA,ooLAA0zLC,aAA6LL,MAAA,0BAAAM,MAAA,cAAAC,YAAA,MAAAC,KAAA,uBAAyGC,aAAgBC,KAAA,4BAAAC,UAA+CC,QAAUF,KAAA,eAAqBL,aAAgBQ,KAAA,2BAAAb,MAAA,YAAAM,KAAA,KAAAC,YAAA,QAAuFO,MAASF,QAAUF,KAAA,kBAAwBL,aAAgBQ,KAAA,mBAAAb,MAAA,eAAAM,MAAA,cAAAC,YAAA","file":"path---generator与async-iterator-f2dc7683ba380b9d2952.js","sourcesContent":["webpackJsonp([255127045736619],{\n\n/***/ 444:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/Generator与asyncIterator.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>假设有一个业务场景是这样的，根据一个微博或者其他社交媒体的图片搜索接口，不停地切换展示图片，比如说不断切换微博有关于猫的图片，每张图片只展示一次，常见的思路就是分页+轮询</p>\\n<p>对于这种生成不间断的数据流的模式，其实也可以用迭代器和generator的思路来做：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> cats <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 很多的猫图</span>\\n\\n<span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">switchCat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> cat <span class=\\\"token keyword\\\">of</span> cats<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">yield</span> html<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`&lt;img src=\\\"</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>url<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\" style=\\\"width:150px;height:150px;\\\" />`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">switchCat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>switchCat 函数每执行一次，就会更换一次图片，但是这样循环还是很快就执行完毕，最后可能只看到了最后一张图片，应该让一张加载完并且展示个1s，再切换图片</p>\\n<p>我们可以再假设<code class=\\\"language-text\\\">for (const cat of cats)</code>的cat 是一个异步函数，函数执行中包括了加载图片和图片停留的逻辑，那我们就可以使用for await … of 循环：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">switchCat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token keyword\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> cat <span class=\\\"token keyword\\\">of</span> cats<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>cat<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">sleep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> html<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`&lt;img src=\\\"</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>url<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\" style=\\\"width:150px;height:150px;\\\" />`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这样每次循环都会至少等待加载图片和图片停留的时间，但cats数组并不是无限的，分页接口每次只返回10张图片，那我们可以尝试让cats包含的10张图片不断更新，同时修改cats为对象，并自定义其迭代器行为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> cats <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span>asyncInterator<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> page <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 假设图片库是无限大的</span>\\n            <span class=\\\"token keyword\\\">const</span> pageData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchCatImages</span><span class=\\\"token punctuation\\\">(</span>page<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> url <span class=\\\"token keyword\\\">of</span> pageData<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">yield</span> url\\n            page<span class=\\\"token operator\\\">++</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>[Symbol.asyncInterator]是对象被用于for await … of 循环中时的回调函数，从而cats就变成了一个可以无限迭代的对象</p>\\n<p>这样的写法并不是什么最佳实践，只是从思路创新的看，我们应该还可以用语言的新特性来做很多事情</p>\",\"frontmatter\":{\"title\":\"Generator与asyncIterator\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"November 06, 2018\"}}},\"pathContext\":{\"slug\":\"/Generator与asyncIterator/\",\"previous\":{\"fields\":{\"slug\":\"/清醒思考的艺术笔记/\"},\"frontmatter\":{\"path\":\"/notes-on-smart-thinking\",\"title\":\"清醒思考的艺术笔记\",\"tags\":null,\"categories\":[\"成长\"]}},\"next\":{\"fields\":{\"slug\":\"/用Vue写不是组件的组件/\"},\"frontmatter\":{\"path\":\"/vue-beyond-html\",\"title\":\"用D3力导向图做思维导图\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---generator与async-iterator-f2dc7683ba380b9d2952.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/Generator与asyncIterator.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>假设有一个业务场景是这样的，根据一个微博或者其他社交媒体的图片搜索接口，不停地切换展示图片，比如说不断切换微博有关于猫的图片，每张图片只展示一次，常见的思路就是分页+轮询</p>\\n<p>对于这种生成不间断的数据流的模式，其实也可以用迭代器和generator的思路来做：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> cats <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 很多的猫图</span>\\n\\n<span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">switchCat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> cat <span class=\\\"token keyword\\\">of</span> cats<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">yield</span> html<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`&lt;img src=\\\"</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>url<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\" style=\\\"width:150px;height:150px;\\\" />`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token function\\\">switchCat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>switchCat 函数每执行一次，就会更换一次图片，但是这样循环还是很快就执行完毕，最后可能只看到了最后一张图片，应该让一张加载完并且展示个1s，再切换图片</p>\\n<p>我们可以再假设<code class=\\\"language-text\\\">for (const cat of cats)</code>的cat 是一个异步函数，函数执行中包括了加载图片和图片停留的逻辑，那我们就可以使用for await … of 循环：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">switchCat</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token keyword\\\">await</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> cat <span class=\\\"token keyword\\\">of</span> cats<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>cat<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">sleep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> html<span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`&lt;img src=\\\"</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>url<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">\\\" style=\\\"width:150px;height:150px;\\\" />`</span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这样每次循环都会至少等待加载图片和图片停留的时间，但cats数组并不是无限的，分页接口每次只返回10张图片，那我们可以尝试让cats包含的10张图片不断更新，同时修改cats为对象，并自定义其迭代器行为：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> cats <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span>asyncInterator<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> page <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n        <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 假设图片库是无限大的</span>\\n            <span class=\\\"token keyword\\\">const</span> pageData <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">fetchCatImages</span><span class=\\\"token punctuation\\\">(</span>page<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> url <span class=\\\"token keyword\\\">of</span> pageData<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">yield</span> url\\n            page<span class=\\\"token operator\\\">++</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>[Symbol.asyncInterator]是对象被用于for await … of 循环中时的回调函数，从而cats就变成了一个可以无限迭代的对象</p>\\n<p>这样的写法并不是什么最佳实践，只是从思路创新的看，我们应该还可以用语言的新特性来做很多事情</p>\",\"frontmatter\":{\"title\":\"Generator与asyncIterator\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"November 06, 2018\"}}},\"pathContext\":{\"slug\":\"/Generator与asyncIterator/\",\"previous\":{\"fields\":{\"slug\":\"/清醒思考的艺术笔记/\"},\"frontmatter\":{\"path\":\"/notes-on-smart-thinking\",\"title\":\"清醒思考的艺术笔记\",\"tags\":null,\"categories\":[\"成长\"]}},\"next\":{\"fields\":{\"slug\":\"/用Vue写不是组件的组件/\"},\"frontmatter\":{\"path\":\"/vue-beyond-html\",\"title\":\"用D3力导向图做思维导图\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/generator与async-iterator.json\n// module id = 444\n// module chunks = 255127045736619"],"sourceRoot":""}