{"version":3,"sources":["webpack:///path---关于大前端-720a7c1e3e2fdc3a5bb3.js","webpack:///./.cache/json/关于大前端.json"],"names":["webpackJsonp","479","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,oFAAAC,KAAA,0pCAAAC,aAA6wCL,MAAA,QAAAM,MAAA,MAAAC,YAAA,MAAAC,KAAA,uBAA+EC,aAAgBC,KAAA,UAAAC,UAA6BC,QAAUF,KAAA,YAAkBL,aAAgBQ,KAAA,0BAAAb,MAAA,SAAAM,MAAA,cAAAC,YAAA,QAA6FO,MAASF,QAAUF,KAAA,mBAAyBL,aAAgBQ,KAAA,sBAAAb,MAAA,gBAAAM,KAAA,KAAAC,YAAA","file":"path---关于大前端-720a7c1e3e2fdc3a5bb3.js","sourcesContent":["webpackJsonp([45530087768325],{\n\n/***/ 479:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/关于大前端.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>大前端，简而言之，就是统一三端的开发( Web, Desktop, Mobile)</p>\\n<p>现在前端涉及的领域十分广泛，各种技术层出不穷——</p>\\n<p>在多媒体领域，比如基于 WebRTC 的语音视频通话，基于P2P + CDN的流建媒体分发网络技术</p>\\n<p>在图形学领域，比如AR / VR 的应用，数据可视化的各类框架如Echarts/D3，以及基于webGL/Canvas的3D游戏</p>\\n<p>还有用前端技术开发各类客户端应用的框架，比如 Electron/RN/Weex/小程序</p>\\n<p>浏览器端的能力也越来越强大，比如基于 ServiceWorker 的PWA应用，以及从 ASM.js 到 WebAssembly 的跨语言程序调用，甚至出现了机器学习领域的前端框架，比如ConvNetJS / deeplearn.js</p>\\n<p>很多公司都推动了前后端的完全分离，逐渐用 React + Redux + React Native 等技术线统一Web前端、Android和iOS 以及微信平台的多端开发</p>\\n<p>而现在业界常见的开发模式如下：</p>\\n<ul>\\n<li>如果是 SPA 这种单页面，基本就是把 index.html 部署到 nginx 后，其他打包部署到 CDN ，包括 JS 、CSS 、图片和字体等</li>\\n<li>静态资源打包后会用webpack等构建工具加上文件内容哈希码，然后把 Cache-Control 的 max-age 设得很大，充分利用浏览器和 HTTP 协议的缓存，同时又保证及时更新</li>\\n<li>如果上面的方式首页白屏时间比较长的话，则会选择 nginx 后端部署 Node.js 做服务端渲染，解决首页白屏时间过长的问题；或者也可以用 Gatsby、next.js 之类静态页面生成工具提前生成静态页面，等待首页加载完成之后，再去动态加载其他页面</li>\\n<li>最后就是前后端职能分离，前端只负责页面和前端效果的实现，开发之前先约定好 API 接口，接口规范可以用 RAP等工具来管理，而前端开发时自己用 JSONServer 模拟数据，最后发布都是打包传到 CDN 上去，这样会有跨域问题，一般可以用 CORS 解决，CORS 的浏览器兼容现在也挺好了</li>\\n<li>完全的前后端分离，更安全可靠，后端可以采用Go做微服务来实现</li>\\n</ul>\\n<p>而上述的架构图一般如下：</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/common-structure.png\\\" alt=\\\"Common Structure\\\"></p>\",\"frontmatter\":{\"title\":\"关于大前端\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"December 26, 2017\"}}},\"pathContext\":{\"slug\":\"/关于大前端/\",\"previous\":{\"fields\":{\"slug\":\"/箭头函数总结/\"},\"frontmatter\":{\"path\":\"/arrow-function-summary\",\"title\":\"箭头函数总结\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/EventSource总结/\"},\"frontmatter\":{\"path\":\"/using-event-source\",\"title\":\"EventSource总结\",\"tags\":null,\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---关于大前端-720a7c1e3e2fdc3a5bb3.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/关于大前端.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>大前端，简而言之，就是统一三端的开发( Web, Desktop, Mobile)</p>\\n<p>现在前端涉及的领域十分广泛，各种技术层出不穷——</p>\\n<p>在多媒体领域，比如基于 WebRTC 的语音视频通话，基于P2P + CDN的流建媒体分发网络技术</p>\\n<p>在图形学领域，比如AR / VR 的应用，数据可视化的各类框架如Echarts/D3，以及基于webGL/Canvas的3D游戏</p>\\n<p>还有用前端技术开发各类客户端应用的框架，比如 Electron/RN/Weex/小程序</p>\\n<p>浏览器端的能力也越来越强大，比如基于 ServiceWorker 的PWA应用，以及从 ASM.js 到 WebAssembly 的跨语言程序调用，甚至出现了机器学习领域的前端框架，比如ConvNetJS / deeplearn.js</p>\\n<p>很多公司都推动了前后端的完全分离，逐渐用 React + Redux + React Native 等技术线统一Web前端、Android和iOS 以及微信平台的多端开发</p>\\n<p>而现在业界常见的开发模式如下：</p>\\n<ul>\\n<li>如果是 SPA 这种单页面，基本就是把 index.html 部署到 nginx 后，其他打包部署到 CDN ，包括 JS 、CSS 、图片和字体等</li>\\n<li>静态资源打包后会用webpack等构建工具加上文件内容哈希码，然后把 Cache-Control 的 max-age 设得很大，充分利用浏览器和 HTTP 协议的缓存，同时又保证及时更新</li>\\n<li>如果上面的方式首页白屏时间比较长的话，则会选择 nginx 后端部署 Node.js 做服务端渲染，解决首页白屏时间过长的问题；或者也可以用 Gatsby、next.js 之类静态页面生成工具提前生成静态页面，等待首页加载完成之后，再去动态加载其他页面</li>\\n<li>最后就是前后端职能分离，前端只负责页面和前端效果的实现，开发之前先约定好 API 接口，接口规范可以用 RAP等工具来管理，而前端开发时自己用 JSONServer 模拟数据，最后发布都是打包传到 CDN 上去，这样会有跨域问题，一般可以用 CORS 解决，CORS 的浏览器兼容现在也挺好了</li>\\n<li>完全的前后端分离，更安全可靠，后端可以采用Go做微服务来实现</li>\\n</ul>\\n<p>而上述的架构图一般如下：</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/common-structure.png\\\" alt=\\\"Common Structure\\\"></p>\",\"frontmatter\":{\"title\":\"关于大前端\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"December 26, 2017\"}}},\"pathContext\":{\"slug\":\"/关于大前端/\",\"previous\":{\"fields\":{\"slug\":\"/箭头函数总结/\"},\"frontmatter\":{\"path\":\"/arrow-function-summary\",\"title\":\"箭头函数总结\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/EventSource总结/\"},\"frontmatter\":{\"path\":\"/using-event-source\",\"title\":\"EventSource总结\",\"tags\":null,\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/关于大前端.json\n// module id = 479\n// module chunks = 45530087768325"],"sourceRoot":""}