{"version":3,"sources":["webpack:///path---index-6e628ccb981bc4e46a70.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","456","module","exports","data","site","siteMetadata","title","allMarkdownRemark","edges","node","excerpt","fields","slug","frontmatter","date","path","pathContext"],"mappings":"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","file":"path---index-6e628ccb981bc4e46a70.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 456:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"PWA\",\"fields\":{\"slug\":\"/pwa-checklist/\"},\"frontmatter\":{\"date\":null,\"title\":\"PWA Checklist\",\"path\":\"/pwa-checklist\"}}},{\"node\":{\"excerpt\":\"不可事必躬亲 疑人不用，用人不疑 注意成长，能做 不等于 只做，失败了 不等于 no more chance\",\"fields\":{\"slug\":\"/关于管理者/\"},\"frontmatter\":{\"date\":\"16 January, 2019\",\"title\":\"关于管理者\",\"path\":\"/thoughts-on-leadership\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/关于学习和实践/\"},\"frontmatter\":{\"date\":\"26 November, 2018\",\"title\":\"关于学习积累的一些思考\",\"path\":\"/thoughts-on-learning\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/关于敏捷开发/\"},\"frontmatter\":{\"date\":\"26 November, 2018\",\"title\":\"关于敏捷开发\",\"path\":\"/thoughts-on-rapid-prototyping\"}}},{\"node\":{\"excerpt\":\"CDN(Content Delivery Network, 内容分发网络) 是用于改善网络性能的一种解决方案 CDN…\",\"fields\":{\"slug\":\"/CDN基础总结/\"},\"frontmatter\":{\"date\":\"26 September, 2018\",\"title\":\"CDN基础总结\",\"path\":\"/cdn-notes\"}}},{\"node\":{\"excerpt\":\"从最简单的方式开始 通常方法我们会提取到prototype中复用以节约内存 但是这样并没有达到真正私有变量的目的，只是单纯地用了命名惯例而已，于是可以算要用一个闭包才形有私有作用域 但这些多个Person类间的name…\",\"fields\":{\"slug\":\"/如何实现javascript的私有变量/\"},\"frontmatter\":{\"date\":\"26 September, 2018\",\"title\":\"事件循环\",\"path\":\"/javascript-private-variables\"}}},{\"node\":{\"excerpt\":\"维基百科定义中，架构模式是指：在给定环境中，对常见的软件架构问题的一种通用的、可复用的解决方案，架构模式与设计模式很相似，只是边界范围更明确 Layered Pattern 层级模式 Client-Sever Pattern 客户端-服务端模式 Master-Slave…\",\"fields\":{\"slug\":\"/常见架构模式笔记/\"},\"frontmatter\":{\"date\":\"22 August, 2018\",\"title\":\"常见架构模式笔记\",\"path\":\"/10-common-architecture-patterns\"}}},{\"node\":{\"excerpt\":\"Reactivity\",\"fields\":{\"slug\":\"/vue-in-depth/\"},\"frontmatter\":{\"date\":\"02 August, 2018\",\"title\":\"Vue in Depth\",\"path\":\"/vue-in-depth\"}}},{\"node\":{\"excerpt\":\"Processing.js & P5.js\",\"fields\":{\"slug\":\"/build-snake-game-with-p5-js/\"},\"frontmatter\":{\"date\":\"02 August, 2018\",\"title\":\"Build Snake Game with P5.js\",\"path\":\"/build-snake-game-with-p5-js\"}}},{\"node\":{\"excerpt\":\"Matter.js\",\"fields\":{\"slug\":\"/matter-js-intro/\"},\"frontmatter\":{\"date\":\"01 August, 2018\",\"title\":\"Matter.js Introduction\",\"path\":\"/matter-js-intro\"}}},{\"node\":{\"excerpt\":\"Presentation Problems\",\"fields\":{\"slug\":\"/presentation-on-the-web-with-reveal-js/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Presentation on the Web with Reveal.js\",\"path\":\"/presentation-on-the-web-with-reveal-js\"}}},{\"node\":{\"excerpt\":\"WebGL\",\"fields\":{\"slug\":\"/three-js-intro/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Three.js Introduction\",\"path\":\"/three-js-intro\"}}},{\"node\":{\"excerpt\":\"\",\"fields\":{\"slug\":\"/event-loop/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Event Loop\",\"path\":\"/event-loop\"}}},{\"node\":{\"excerpt\":\"Everything is an element. Concepts Polymer lets you build encapsulated, reusable  Web Components  that work just like standard HTML elements…\",\"fields\":{\"slug\":\"/Ploymer入门/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Ploymer入门\",\"path\":\"/polymer-introduction\"}}},{\"node\":{\"excerpt\":\"RAIL is a User-centric performance model that breaks down the user’s experience into key actions. Every web app has four distinct aspects to…\",\"fields\":{\"slug\":\"/RAIL性能模型笔记/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"RAIL性能模型笔记\",\"path\":\"/rail-performance-model\"}}},{\"node\":{\"excerpt\":\"Redux Create a store Use a store React Redux Provider Mapping state Shorthand Combining reducers Middleware Signature Applying Middleware…\",\"fields\":{\"slug\":\"/Redux基础/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Redux基础\",\"path\":\"/redux-cheatsheet\"}}},{\"node\":{\"excerpt\":\"Accelerated Mobile Page\",\"fields\":{\"slug\":\"/amp-intro/\"},\"frontmatter\":{\"date\":\"22 July, 2018\",\"title\":\"AMP Introduction\",\"path\":\"/amp-intro\"}}},{\"node\":{\"excerpt\":\"Service Worker Workbox is a set of service worker libraries that making build progressive web apps easy.\",\"fields\":{\"slug\":\"/workbox-usage/\"},\"frontmatter\":{\"date\":\"21 July, 2018\",\"title\":\"Workbox Usage\",\"path\":\"/workbox-usage\"}}},{\"node\":{\"excerpt\":\"Meta-Programming\",\"fields\":{\"slug\":\"/javascript-metaprogramming/\"},\"frontmatter\":{\"date\":\"20 July, 2018\",\"title\":\"Javascript Meta-Programming\",\"path\":\"/javascript-meta-programming\"}}},{\"node\":{\"excerpt\":\"Pros & Cons\",\"fields\":{\"slug\":\"/ssr-optimization/\"},\"frontmatter\":{\"date\":\"29 June, 2018\",\"title\":\"SSR Optimization\",\"path\":\"/ssr-optimization\"}}},{\"node\":{\"excerpt\":\"Worker  是在 Javascript 中实现多线程的一种方法，通常用于进行耗时/次要的任务，可以提高计算速度，并且达到不阻塞UI的目的 在 Web Workers API 中，Worker可以分为  dedicated Woker ， SharedWorker…\",\"fields\":{\"slug\":\"/Web Worker笔记/\"},\"frontmatter\":{\"date\":\"26 June, 2018\",\"title\":\"Web Workers笔记\",\"path\":\"/web-workers-notes\"}}},{\"node\":{\"excerpt\":\"What 力导向图是D3的图形布局中非常热门的一种\",\"fields\":{\"slug\":\"/d3-force-directed-graph/\"},\"frontmatter\":{\"date\":\"20 June, 2018\",\"title\":\"D3: 力导向图\",\"path\":\"/d3-js-intro\"}}},{\"node\":{\"excerpt\":\"Fetch\",\"fields\":{\"slug\":\"/fetch-vs-axios/\"},\"frontmatter\":{\"date\":\"02 June, 2018\",\"title\":\"Fetch vs Axios\",\"path\":\"/fetch-vs-axios\"}}},{\"node\":{\"excerpt\":\"Runtime Performance\",\"fields\":{\"slug\":\"/optimizing-runtime-performance/\"},\"frontmatter\":{\"date\":\"26 May, 2018\",\"title\":\"Optimizing Runtime Performance\",\"path\":\"/optimizing-runtime-performance\"}}},{\"node\":{\"excerpt\":\"很多性能优化比较关注于Page Load Time (PLT)，比如经典的雅虎14条中提到的合并请求和压缩静态资源等等，但除去网站加载的时间以外，用户大部分的时间是花在与页面的交互上 因此页面渲染的性能也是关键优化点，包括UI反馈和动画等，最终目标都是提供给用户60fps…\",\"fields\":{\"slug\":\"/页面渲染问题总结/\"},\"frontmatter\":{\"date\":\"25 May, 2018\",\"title\":\"页面渲染问题总结\",\"path\":\"/render-performance-checklist\"}}},{\"node\":{\"excerpt\":\"Babel 是 Javascript 的转译工具，可以帮助开发者在写代码的时候可以使用更先进的语法和API，并在运行前转译为更具兼容性的语法 确立  ECMAScript  标准语法的五阶段: Stage 0：strawman - “稻草人” Stage 1：proposal…\",\"fields\":{\"slug\":\"/Babel笔记/\"},\"frontmatter\":{\"date\":\"20 May, 2018\",\"title\":\"Babel笔记\",\"path\":\"/babel-notes\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/前端工程师的一专多长/\"},\"frontmatter\":{\"date\":\"17 May, 2018\",\"title\":\"前端工程师的一专多长\",\"path\":\"/front-end-engineer-skills\"}}},{\"node\":{\"excerpt\":\"Definition GraphQL is a query language proposed by Facebook. Why GraphQL\",\"fields\":{\"slug\":\"/graphql-intro/\"},\"frontmatter\":{\"date\":\"20 April, 2018\",\"title\":\"GraphQL: Basics\",\"path\":\"/graphql-introduction\"}}},{\"node\":{\"excerpt\":\"后端监控  - 采集服务器以及链路上各种中间件的数据\\n 前端监控  - 运行在用户终端上的代码 最简实现：通过 window.onerror 采集到所有的未捕获异常，并通过 new Image() 的方式构造一个 404 的 HTTP 请求，最后在服务端实时过滤 access…\",\"fields\":{\"slug\":\"/前端监控系统总结/\"},\"frontmatter\":{\"date\":\"06 April, 2018\",\"title\":\"前端监控系统总结\",\"path\":\"/front-end-monitor\"}}},{\"node\":{\"excerpt\":\"编程范式  是指一种基于基本原则来思考如何构建软件的方式，常见的范式还有  面向对象编程 、 面向过程编程  和  函数式编程 函数式编程 （Functional Programming…\",\"fields\":{\"slug\":\"/函数式编程基本概念/\"},\"frontmatter\":{\"date\":\"06 March, 2018\",\"title\":\"函数式编程基本概念\",\"path\":\"/functional-programming-basics\"}}},{\"node\":{\"excerpt\":\"首先需要购置一台VPN用主机和自用域名，将域名 DOMAIN 的 A/AAAA 记录指向该主机，安装nginx并启动，主机推荐腾讯云香港区域的S1系列（CentOS） Let’s Encrypt 为了内容传输的隐密性，可以采用 Let’s Encrypt…\",\"fields\":{\"slug\":\"/用OpenConnectSever搭建VPN/\"},\"frontmatter\":{\"date\":\"26 January, 2018\",\"title\":\"OpenConnectSever搭建VPN总结\",\"path\":\"/ocserv-letsencrypt-vpn\"}}},{\"node\":{\"excerpt\":\"大前端，简而言之，就是统一三端的开发( Web, Desktop, Mobile) 现在前端涉及的领域十分广泛，各种技术层出不穷—— 在多媒体领域，比如基于 WebRTC 的语音视频通话，基于P2P + CDN的流建媒体分发网络技术 在图形学领域，比如AR / VR…\",\"fields\":{\"slug\":\"/关于大前端/\"},\"frontmatter\":{\"date\":\"26 December, 2017\",\"title\":\"关于大前端\",\"path\":\"/about-the-big-frontend\"}}},{\"node\":{\"excerpt\":\"箭头函数用起来比较潮，但是原来的函数写法依旧有其用处，毕竟这两者还有很多不等价的情况 箭头函数缺失的东西 没有自己的 this ，其this是由执行时在当前scope中继承的 没有 prototype 属性，所以用于new，如 没有 arguments 对象，也没有 new…\",\"fields\":{\"slug\":\"/箭头函数总结/\"},\"frontmatter\":{\"date\":\"26 December, 2017\",\"title\":\"箭头函数总结\",\"path\":\"/arrow-function-summary\"}}},{\"node\":{\"excerpt\":\"推荐视频： Philip Roberts  JSConf EU 2014 Erin Zimmer JSConf EU 2018 Jake Archibald JSConf.Asia 2018 Javascription的运行时环境其实最核心的两个部分就是Call Stack…\",\"fields\":{\"slug\":\"/事件循环原理/\"},\"frontmatter\":{\"date\":\"26 November, 2017\",\"title\":\"事件循环\",\"path\":\"/how-event-loop-works\"}}},{\"node\":{\"excerpt\":\"\",\"fields\":{\"slug\":\"/一个极简的Promise垫片实现/\"},\"frontmatter\":{\"date\":\"06 September, 2017\",\"title\":\"一个极简的Promise垫片实现\",\"path\":\"/a-tiny-promise-polyfill\"}}},{\"node\":{\"excerpt\":\"与性能相关的事情不应该拖到项目的最后来做，要在项目的设计之初就开始考虑，这样才可以使性能的各种隐形需求完美地整合到项目中，随着项目一起推进 前端是庞大的，包括 HTML、CSS、 Javascript、Image 和 Font…\",\"fields\":{\"slug\":\"/网站性能优化总结/\"},\"frontmatter\":{\"date\":\"16 July, 2017\",\"title\":\"网站性能优化总结\",\"path\":\"/site-performance-summary\"}}},{\"node\":{\"excerpt\":\"脚手架工具： 组件案例： prop和state的使用方法和React一致，所有的样式都通过style注入，只把应用作为一个整体注册一次，而不是每个组件/模块都注册 另外，React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点 常用的View…\",\"fields\":{\"slug\":\"/React-Native入门笔记/\"},\"frontmatter\":{\"date\":\"26 June, 2017\",\"title\":\"React-Native入门\",\"path\":\"/react-native-intro\"}}},{\"node\":{\"excerpt\":\"运行环境 在iOS上，小程序的javascript代码是运行在 JavaScriptCore 中 在Android上，小程序的javascript代码是通过X5内核来解析 在 开发工具上， 小程序的javascript代码是运行于 nwjs（原node-webkit） nw.js…\",\"fields\":{\"slug\":\"/小程序基本原理/\"},\"frontmatter\":{\"date\":\"01 May, 2017\",\"title\":\"小程序基本原理\",\"path\":\"/mini-program-notes\"}}},{\"node\":{\"excerpt\":\"在C之类的语言中，开发者必须手动地调用和释放内存，也就是手动地调用malloc()、calloc()、realloc() 和 free() 等方法，而在 Java或者Javascript…\",\"fields\":{\"slug\":\"/内存管理与垃圾回收/\"},\"frontmatter\":{\"date\":\"29 April, 2017\",\"title\":\"内存管理与垃圾回收\",\"path\":\"/js-memory-management\"}}},{\"node\":{\"excerpt\":\"原型\",\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Runtime/\"},\"frontmatter\":{\"date\":\"15 April, 2017\",\"title\":\"Javascript忍者禁术笔记-Object\",\"path\":\"/javascript-ninja-object\"}}},{\"node\":{\"excerpt\":\"函数的特性 函数可以看作一种特殊的对象，可以赋值给变量，也可以作为同步或者异步的回调，同时也可以具有属性，可以记录执行的结果 创建函数的方法有很多，function声明、箭头函数、Function构造器、generator函数，函数可以作为其他函数的返回 创建函数 IIFE…\",\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Object/\"},\"frontmatter\":{\"date\":\"13 April, 2017\",\"title\":\"Javascript忍者禁术笔记-Function\",\"path\":\"/javascript-ninja-function\"}}},{\"node\":{\"excerpt\":\"运行机制 javascript是解释型语言，采用JIT(Just In Time)机制，运行用机器码并不是提前生成的(AOT, Ahead Of Time)，这是与C等编译型语言的主要不同之一，javascript…\",\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Function/\"},\"frontmatter\":{\"date\":\"10 April, 2017\",\"title\":\"Javascript忍者禁术笔记-Runtime\",\"path\":\"/javascript-ninja-runtime\"}}},{\"node\":{\"excerpt\":\"CommonJS模式 CommonJS是Node的主要模块机制，从设计的出发点就是考虑了服务端开发，关键字只有require和module.exports，exports是一个特殊属性，所有对它的赋值都会被export…\",\"fields\":{\"slug\":\"/JS的模块系统/\"},\"frontmatter\":{\"date\":\"19 January, 2017\",\"title\":\"JS的模块系统\",\"path\":\"/js-module-system\"}}},{\"node\":{\"excerpt\":\"用scope避免命名冲突 创建可复用的npm init devDependencies的用外 npm脚本 版本管理 发布管理 安全检查\",\"fields\":{\"slug\":\"/Npm冷知识/\"},\"frontmatter\":{\"date\":\"13 January, 2017\",\"title\":\"Npm冷知识\",\"path\":\"/tricks-about-npm\"}}},{\"node\":{\"excerpt\":\"变量未定义会报错 删除一个变量/函数/函数参数的时候会报错 重复定义对象属性/函数参数会报错 使用八进制字面量和转义符会报错 删除只读属性会报错，非strict模式下会静默失败 赋值只有getter的属性会报错，非strict…\",\"fields\":{\"slug\":\"/JS里的严格模式/\"},\"frontmatter\":{\"date\":\"19 November, 2016\",\"title\":\"JS里的严格模式\",\"path\":\"/js-strict-mode\"}}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-6e628ccb981bc4e46a70.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\"}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"excerpt\":\"PWA\",\"fields\":{\"slug\":\"/pwa-checklist/\"},\"frontmatter\":{\"date\":null,\"title\":\"PWA Checklist\",\"path\":\"/pwa-checklist\"}}},{\"node\":{\"excerpt\":\"不可事必躬亲 疑人不用，用人不疑 注意成长，能做 不等于 只做，失败了 不等于 no more chance\",\"fields\":{\"slug\":\"/关于管理者/\"},\"frontmatter\":{\"date\":\"16 January, 2019\",\"title\":\"关于管理者\",\"path\":\"/thoughts-on-leadership\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/关于学习和实践/\"},\"frontmatter\":{\"date\":\"26 November, 2018\",\"title\":\"关于学习积累的一些思考\",\"path\":\"/thoughts-on-learning\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/关于敏捷开发/\"},\"frontmatter\":{\"date\":\"26 November, 2018\",\"title\":\"关于敏捷开发\",\"path\":\"/thoughts-on-rapid-prototyping\"}}},{\"node\":{\"excerpt\":\"CDN(Content Delivery Network, 内容分发网络) 是用于改善网络性能的一种解决方案 CDN…\",\"fields\":{\"slug\":\"/CDN基础总结/\"},\"frontmatter\":{\"date\":\"26 September, 2018\",\"title\":\"CDN基础总结\",\"path\":\"/cdn-notes\"}}},{\"node\":{\"excerpt\":\"从最简单的方式开始 通常方法我们会提取到prototype中复用以节约内存 但是这样并没有达到真正私有变量的目的，只是单纯地用了命名惯例而已，于是可以算要用一个闭包才形有私有作用域 但这些多个Person类间的name…\",\"fields\":{\"slug\":\"/如何实现javascript的私有变量/\"},\"frontmatter\":{\"date\":\"26 September, 2018\",\"title\":\"事件循环\",\"path\":\"/javascript-private-variables\"}}},{\"node\":{\"excerpt\":\"维基百科定义中，架构模式是指：在给定环境中，对常见的软件架构问题的一种通用的、可复用的解决方案，架构模式与设计模式很相似，只是边界范围更明确 Layered Pattern 层级模式 Client-Sever Pattern 客户端-服务端模式 Master-Slave…\",\"fields\":{\"slug\":\"/常见架构模式笔记/\"},\"frontmatter\":{\"date\":\"22 August, 2018\",\"title\":\"常见架构模式笔记\",\"path\":\"/10-common-architecture-patterns\"}}},{\"node\":{\"excerpt\":\"Reactivity\",\"fields\":{\"slug\":\"/vue-in-depth/\"},\"frontmatter\":{\"date\":\"02 August, 2018\",\"title\":\"Vue in Depth\",\"path\":\"/vue-in-depth\"}}},{\"node\":{\"excerpt\":\"Processing.js & P5.js\",\"fields\":{\"slug\":\"/build-snake-game-with-p5-js/\"},\"frontmatter\":{\"date\":\"02 August, 2018\",\"title\":\"Build Snake Game with P5.js\",\"path\":\"/build-snake-game-with-p5-js\"}}},{\"node\":{\"excerpt\":\"Matter.js\",\"fields\":{\"slug\":\"/matter-js-intro/\"},\"frontmatter\":{\"date\":\"01 August, 2018\",\"title\":\"Matter.js Introduction\",\"path\":\"/matter-js-intro\"}}},{\"node\":{\"excerpt\":\"Presentation Problems\",\"fields\":{\"slug\":\"/presentation-on-the-web-with-reveal-js/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Presentation on the Web with Reveal.js\",\"path\":\"/presentation-on-the-web-with-reveal-js\"}}},{\"node\":{\"excerpt\":\"WebGL\",\"fields\":{\"slug\":\"/three-js-intro/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Three.js Introduction\",\"path\":\"/three-js-intro\"}}},{\"node\":{\"excerpt\":\"\",\"fields\":{\"slug\":\"/event-loop/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Event Loop\",\"path\":\"/event-loop\"}}},{\"node\":{\"excerpt\":\"Everything is an element. Concepts Polymer lets you build encapsulated, reusable  Web Components  that work just like standard HTML elements…\",\"fields\":{\"slug\":\"/Ploymer入门/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Ploymer入门\",\"path\":\"/polymer-introduction\"}}},{\"node\":{\"excerpt\":\"RAIL is a User-centric performance model that breaks down the user’s experience into key actions. Every web app has four distinct aspects to…\",\"fields\":{\"slug\":\"/RAIL性能模型笔记/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"RAIL性能模型笔记\",\"path\":\"/rail-performance-model\"}}},{\"node\":{\"excerpt\":\"Redux Create a store Use a store React Redux Provider Mapping state Shorthand Combining reducers Middleware Signature Applying Middleware…\",\"fields\":{\"slug\":\"/Redux基础/\"},\"frontmatter\":{\"date\":\"26 July, 2018\",\"title\":\"Redux基础\",\"path\":\"/redux-cheatsheet\"}}},{\"node\":{\"excerpt\":\"Accelerated Mobile Page\",\"fields\":{\"slug\":\"/amp-intro/\"},\"frontmatter\":{\"date\":\"22 July, 2018\",\"title\":\"AMP Introduction\",\"path\":\"/amp-intro\"}}},{\"node\":{\"excerpt\":\"Service Worker Workbox is a set of service worker libraries that making build progressive web apps easy.\",\"fields\":{\"slug\":\"/workbox-usage/\"},\"frontmatter\":{\"date\":\"21 July, 2018\",\"title\":\"Workbox Usage\",\"path\":\"/workbox-usage\"}}},{\"node\":{\"excerpt\":\"Meta-Programming\",\"fields\":{\"slug\":\"/javascript-metaprogramming/\"},\"frontmatter\":{\"date\":\"20 July, 2018\",\"title\":\"Javascript Meta-Programming\",\"path\":\"/javascript-meta-programming\"}}},{\"node\":{\"excerpt\":\"Pros & Cons\",\"fields\":{\"slug\":\"/ssr-optimization/\"},\"frontmatter\":{\"date\":\"29 June, 2018\",\"title\":\"SSR Optimization\",\"path\":\"/ssr-optimization\"}}},{\"node\":{\"excerpt\":\"Worker  是在 Javascript 中实现多线程的一种方法，通常用于进行耗时/次要的任务，可以提高计算速度，并且达到不阻塞UI的目的 在 Web Workers API 中，Worker可以分为  dedicated Woker ， SharedWorker…\",\"fields\":{\"slug\":\"/Web Worker笔记/\"},\"frontmatter\":{\"date\":\"26 June, 2018\",\"title\":\"Web Workers笔记\",\"path\":\"/web-workers-notes\"}}},{\"node\":{\"excerpt\":\"What 力导向图是D3的图形布局中非常热门的一种\",\"fields\":{\"slug\":\"/d3-force-directed-graph/\"},\"frontmatter\":{\"date\":\"20 June, 2018\",\"title\":\"D3: 力导向图\",\"path\":\"/d3-js-intro\"}}},{\"node\":{\"excerpt\":\"Fetch\",\"fields\":{\"slug\":\"/fetch-vs-axios/\"},\"frontmatter\":{\"date\":\"02 June, 2018\",\"title\":\"Fetch vs Axios\",\"path\":\"/fetch-vs-axios\"}}},{\"node\":{\"excerpt\":\"Runtime Performance\",\"fields\":{\"slug\":\"/optimizing-runtime-performance/\"},\"frontmatter\":{\"date\":\"26 May, 2018\",\"title\":\"Optimizing Runtime Performance\",\"path\":\"/optimizing-runtime-performance\"}}},{\"node\":{\"excerpt\":\"很多性能优化比较关注于Page Load Time (PLT)，比如经典的雅虎14条中提到的合并请求和压缩静态资源等等，但除去网站加载的时间以外，用户大部分的时间是花在与页面的交互上 因此页面渲染的性能也是关键优化点，包括UI反馈和动画等，最终目标都是提供给用户60fps…\",\"fields\":{\"slug\":\"/页面渲染问题总结/\"},\"frontmatter\":{\"date\":\"25 May, 2018\",\"title\":\"页面渲染问题总结\",\"path\":\"/render-performance-checklist\"}}},{\"node\":{\"excerpt\":\"Babel 是 Javascript 的转译工具，可以帮助开发者在写代码的时候可以使用更先进的语法和API，并在运行前转译为更具兼容性的语法 确立  ECMAScript  标准语法的五阶段: Stage 0：strawman - “稻草人” Stage 1：proposal…\",\"fields\":{\"slug\":\"/Babel笔记/\"},\"frontmatter\":{\"date\":\"20 May, 2018\",\"title\":\"Babel笔记\",\"path\":\"/babel-notes\"}}},{\"node\":{\"excerpt\":\"…\",\"fields\":{\"slug\":\"/前端工程师的一专多长/\"},\"frontmatter\":{\"date\":\"17 May, 2018\",\"title\":\"前端工程师的一专多长\",\"path\":\"/front-end-engineer-skills\"}}},{\"node\":{\"excerpt\":\"Definition GraphQL is a query language proposed by Facebook. Why GraphQL\",\"fields\":{\"slug\":\"/graphql-intro/\"},\"frontmatter\":{\"date\":\"20 April, 2018\",\"title\":\"GraphQL: Basics\",\"path\":\"/graphql-introduction\"}}},{\"node\":{\"excerpt\":\"后端监控  - 采集服务器以及链路上各种中间件的数据\\n 前端监控  - 运行在用户终端上的代码 最简实现：通过 window.onerror 采集到所有的未捕获异常，并通过 new Image() 的方式构造一个 404 的 HTTP 请求，最后在服务端实时过滤 access…\",\"fields\":{\"slug\":\"/前端监控系统总结/\"},\"frontmatter\":{\"date\":\"06 April, 2018\",\"title\":\"前端监控系统总结\",\"path\":\"/front-end-monitor\"}}},{\"node\":{\"excerpt\":\"编程范式  是指一种基于基本原则来思考如何构建软件的方式，常见的范式还有  面向对象编程 、 面向过程编程  和  函数式编程 函数式编程 （Functional Programming…\",\"fields\":{\"slug\":\"/函数式编程基本概念/\"},\"frontmatter\":{\"date\":\"06 March, 2018\",\"title\":\"函数式编程基本概念\",\"path\":\"/functional-programming-basics\"}}},{\"node\":{\"excerpt\":\"首先需要购置一台VPN用主机和自用域名，将域名 DOMAIN 的 A/AAAA 记录指向该主机，安装nginx并启动，主机推荐腾讯云香港区域的S1系列（CentOS） Let’s Encrypt 为了内容传输的隐密性，可以采用 Let’s Encrypt…\",\"fields\":{\"slug\":\"/用OpenConnectSever搭建VPN/\"},\"frontmatter\":{\"date\":\"26 January, 2018\",\"title\":\"OpenConnectSever搭建VPN总结\",\"path\":\"/ocserv-letsencrypt-vpn\"}}},{\"node\":{\"excerpt\":\"大前端，简而言之，就是统一三端的开发( Web, Desktop, Mobile) 现在前端涉及的领域十分广泛，各种技术层出不穷—— 在多媒体领域，比如基于 WebRTC 的语音视频通话，基于P2P + CDN的流建媒体分发网络技术 在图形学领域，比如AR / VR…\",\"fields\":{\"slug\":\"/关于大前端/\"},\"frontmatter\":{\"date\":\"26 December, 2017\",\"title\":\"关于大前端\",\"path\":\"/about-the-big-frontend\"}}},{\"node\":{\"excerpt\":\"箭头函数用起来比较潮，但是原来的函数写法依旧有其用处，毕竟这两者还有很多不等价的情况 箭头函数缺失的东西 没有自己的 this ，其this是由执行时在当前scope中继承的 没有 prototype 属性，所以用于new，如 没有 arguments 对象，也没有 new…\",\"fields\":{\"slug\":\"/箭头函数总结/\"},\"frontmatter\":{\"date\":\"26 December, 2017\",\"title\":\"箭头函数总结\",\"path\":\"/arrow-function-summary\"}}},{\"node\":{\"excerpt\":\"推荐视频： Philip Roberts  JSConf EU 2014 Erin Zimmer JSConf EU 2018 Jake Archibald JSConf.Asia 2018 Javascription的运行时环境其实最核心的两个部分就是Call Stack…\",\"fields\":{\"slug\":\"/事件循环原理/\"},\"frontmatter\":{\"date\":\"26 November, 2017\",\"title\":\"事件循环\",\"path\":\"/how-event-loop-works\"}}},{\"node\":{\"excerpt\":\"\",\"fields\":{\"slug\":\"/一个极简的Promise垫片实现/\"},\"frontmatter\":{\"date\":\"06 September, 2017\",\"title\":\"一个极简的Promise垫片实现\",\"path\":\"/a-tiny-promise-polyfill\"}}},{\"node\":{\"excerpt\":\"与性能相关的事情不应该拖到项目的最后来做，要在项目的设计之初就开始考虑，这样才可以使性能的各种隐形需求完美地整合到项目中，随着项目一起推进 前端是庞大的，包括 HTML、CSS、 Javascript、Image 和 Font…\",\"fields\":{\"slug\":\"/网站性能优化总结/\"},\"frontmatter\":{\"date\":\"16 July, 2017\",\"title\":\"网站性能优化总结\",\"path\":\"/site-performance-summary\"}}},{\"node\":{\"excerpt\":\"脚手架工具： 组件案例： prop和state的使用方法和React一致，所有的样式都通过style注入，只把应用作为一个整体注册一次，而不是每个组件/模块都注册 另外，React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点 常用的View…\",\"fields\":{\"slug\":\"/React-Native入门笔记/\"},\"frontmatter\":{\"date\":\"26 June, 2017\",\"title\":\"React-Native入门\",\"path\":\"/react-native-intro\"}}},{\"node\":{\"excerpt\":\"运行环境 在iOS上，小程序的javascript代码是运行在 JavaScriptCore 中 在Android上，小程序的javascript代码是通过X5内核来解析 在 开发工具上， 小程序的javascript代码是运行于 nwjs（原node-webkit） nw.js…\",\"fields\":{\"slug\":\"/小程序基本原理/\"},\"frontmatter\":{\"date\":\"01 May, 2017\",\"title\":\"小程序基本原理\",\"path\":\"/mini-program-notes\"}}},{\"node\":{\"excerpt\":\"在C之类的语言中，开发者必须手动地调用和释放内存，也就是手动地调用malloc()、calloc()、realloc() 和 free() 等方法，而在 Java或者Javascript…\",\"fields\":{\"slug\":\"/内存管理与垃圾回收/\"},\"frontmatter\":{\"date\":\"29 April, 2017\",\"title\":\"内存管理与垃圾回收\",\"path\":\"/js-memory-management\"}}},{\"node\":{\"excerpt\":\"原型\",\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Runtime/\"},\"frontmatter\":{\"date\":\"15 April, 2017\",\"title\":\"Javascript忍者禁术笔记-Object\",\"path\":\"/javascript-ninja-object\"}}},{\"node\":{\"excerpt\":\"函数的特性 函数可以看作一种特殊的对象，可以赋值给变量，也可以作为同步或者异步的回调，同时也可以具有属性，可以记录执行的结果 创建函数的方法有很多，function声明、箭头函数、Function构造器、generator函数，函数可以作为其他函数的返回 创建函数 IIFE…\",\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Object/\"},\"frontmatter\":{\"date\":\"13 April, 2017\",\"title\":\"Javascript忍者禁术笔记-Function\",\"path\":\"/javascript-ninja-function\"}}},{\"node\":{\"excerpt\":\"运行机制 javascript是解释型语言，采用JIT(Just In Time)机制，运行用机器码并不是提前生成的(AOT, Ahead Of Time)，这是与C等编译型语言的主要不同之一，javascript…\",\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Function/\"},\"frontmatter\":{\"date\":\"10 April, 2017\",\"title\":\"Javascript忍者禁术笔记-Runtime\",\"path\":\"/javascript-ninja-runtime\"}}},{\"node\":{\"excerpt\":\"CommonJS模式 CommonJS是Node的主要模块机制，从设计的出发点就是考虑了服务端开发，关键字只有require和module.exports，exports是一个特殊属性，所有对它的赋值都会被export…\",\"fields\":{\"slug\":\"/JS的模块系统/\"},\"frontmatter\":{\"date\":\"19 January, 2017\",\"title\":\"JS的模块系统\",\"path\":\"/js-module-system\"}}},{\"node\":{\"excerpt\":\"用scope避免命名冲突 创建可复用的npm init devDependencies的用外 npm脚本 版本管理 发布管理 安全检查\",\"fields\":{\"slug\":\"/Npm冷知识/\"},\"frontmatter\":{\"date\":\"13 January, 2017\",\"title\":\"Npm冷知识\",\"path\":\"/tricks-about-npm\"}}},{\"node\":{\"excerpt\":\"变量未定义会报错 删除一个变量/函数/函数参数的时候会报错 重复定义对象属性/函数参数会报错 使用八进制字面量和转义符会报错 删除只读属性会报错，非strict模式下会静默失败 赋值只有getter的属性会报错，非strict…\",\"fields\":{\"slug\":\"/JS里的严格模式/\"},\"frontmatter\":{\"date\":\"19 November, 2016\",\"title\":\"JS里的严格模式\",\"path\":\"/js-strict-mode\"}}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 456\n// module chunks = 142629428675168"],"sourceRoot":""}