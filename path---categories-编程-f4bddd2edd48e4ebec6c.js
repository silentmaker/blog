webpackJsonp([0xecb1f68cada4],{427:function(e,t){e.exports={data:{site:{siteMetadata:{title:"Elvin's Blog"}},allMarkdownRemark:{edges:[{node:{excerpt:"从最简单的方式开始 通常方法我们会提取到prototype中复用以节约内存 但是这样并没有达到真正私有变量的目的，只是单纯地用了命名惯例而已，于是可以算要用一个闭包才形有私有作用域 但这些多个Person类间的name…",fields:{slug:"/如何实现javascript的私有变量/"},frontmatter:{date:"26 September, 2018",title:"事件循环"}}},{node:{excerpt:"CDN(Content Delivery Network, 内容分发网络) 是用于改善网络性能的一种解决方案 CDN…",fields:{slug:"/CDN基础总结/"},frontmatter:{date:"26 September, 2018",title:"CDN基础总结"}}},{node:{excerpt:"维基百科定义中，架构模式是指：在给定环境中，对常见的软件架构问题的一种通用的、可复用的解决方案，架构模式与设计模式很相似，只是边界范围更明确 Layered Pattern 层级模式 Client-Sever Pattern 客户端-服务端模式 Master-Slave…",fields:{slug:"/常见架构模式笔记/"},frontmatter:{date:"22 August, 2018",title:"常见架构模式笔记"}}},{node:{excerpt:"Everything is an element. Concepts Polymer lets you build encapsulated, reusable  Web Components  that work just like standard HTML elements…",fields:{slug:"/Ploymer入门/"},frontmatter:{date:"26 July, 2018",title:"Ploymer入门"}}},{node:{excerpt:"RAIL is a User-centric performance model that breaks down the user’s experience into key actions. Every web app has four distinct aspects to…",fields:{slug:"/RAIL性能模型笔记/"},frontmatter:{date:"26 July, 2018",title:"RAIL性能模型笔记"}}},{node:{excerpt:"Redux 创建Store 使用Store React Redux 通过Provider注入store 状态映射 简化版本如下 合并Reducers Redux Middleware 创建中间件 应用中间件 其他 Redux Documentation",fields:{slug:"/Redux基础/"},frontmatter:{date:"26 July, 2018",title:"Redux基础"}}},{node:{excerpt:"Worker  是在 Javascript 中实现多线程的一种方法，通常用于进行耗时/次要的任务，可以提高计算速度，并且达到不阻塞UI的目的 在 Web Workers API 中，Worker可以分为  dedicated Woker ， SharedWorker…",fields:{slug:"/Web Worker笔记/"},frontmatter:{date:"26 June, 2018",title:"Web Workers笔记"}}},{node:{excerpt:"很多性能优化比较关注于Page Load Time (PLT)，比如经典的雅虎14条中提到的合并请求和压缩静态资源等等，但除去网站加载的时间以外，用户大部分的时间是花在与页面的交互上 因此页面渲染的性能也是关键优化点，包括UI反馈和动画等，最终目标都是提供给用户60fps…",fields:{slug:"/页面渲染问题总结/"},frontmatter:{date:"25 May, 2018",title:"页面渲染问题总结"}}},{node:{excerpt:"Babel 是 Javascript 的转译工具，可以帮助开发者在写代码的时候可以使用更先进的语法和API，并在运行前转译为更具兼容性的语法 确立  ECMAScript  标准语法的五阶段: Stage 0：strawman - “稻草人” Stage 1：proposal…",fields:{slug:"/Babel笔记/"},frontmatter:{date:"20 May, 2018",title:"Babel笔记"}}},{node:{excerpt:"…",fields:{slug:"/前端工程师的一专多长/"},frontmatter:{date:"17 May, 2018",title:"前端工程师的一专多长"}}},{node:{excerpt:"后端监控  - 采集服务器以及链路上各种中间件的数据\n 前端监控  - 运行在用户终端上的代码 最简实现：通过 window.onerror 采集到所有的未捕获异常，并通过 new Image() 的方式构造一个 404 的 HTTP 请求，最后在服务端实时过滤 access…",fields:{slug:"/前端监控系统总结/"},frontmatter:{date:"06 April, 2018",title:"前端监控系统总结"}}},{node:{excerpt:"编程范式  是指一种基于基本原则来思考如何构建软件的方式，常见的范式还有  面向对象编程 、 面向过程编程  和  函数式编程 函数式编程 （Functional Programming…",fields:{slug:"/函数式编程基本概念/"},frontmatter:{date:"06 March, 2018",title:"函数式编程基本概念"}}},{node:{excerpt:"P5.js P5.js源于Processing，它们原来的出发点都是使图形编程可供艺术家，设计师，教育工作者和初学者使用，而Processing是很多年前提出的技术了，其实现其实是使用regex将Java转换为JS，而P5.js则是以原生JavaScript…",fields:{slug:"/P5.js和贪吃蛇游戏/"},frontmatter:{date:"02 February, 2018",title:"P5.js和贪吃蛇游戏"}}},{node:{excerpt:"首先需要购置一台VPN用主机和自用域名，将域名 DOMAIN 的 A/AAAA 记录指向该主机，安装nginx并启动，主机推荐腾讯云香港区域的S1系列（CentOS） Let’s Encrypt 为了内容传输的隐密性，可以采用 Let’s Encrypt…",fields:{slug:"/用OpenConnectSever搭建VPN/"},frontmatter:{date:"26 January, 2018",title:"OpenConnectSever搭建VPN总结"}}},{node:{excerpt:"箭头函数用起来比较潮，但是原来的函数写法依旧有其用处，毕竟这两者还有很多不等价的情况 箭头函数缺失的东西 没有自己的 this ，其this是由执行时在当前scope中继承的 没有 prototype 属性，所以用于new，如 没有 arguments 对象，也没有 new…",fields:{slug:"/箭头函数总结/"},frontmatter:{date:"26 December, 2017",title:"箭头函数总结"}}},{node:{excerpt:"大前端，简而言之，就是统一三端的开发( Web, Desktop, Mobile) 现在前端涉及的领域十分广泛，各种技术层出不穷—— 在多媒体领域，比如基于 WebRTC 的语音视频通话，基于P2P + CDN的流建媒体分发网络技术 在图形学领域，比如AR / VR…",fields:{slug:"/关于大前端/"},frontmatter:{date:"26 December, 2017",title:"关于大前端"}}},{node:{excerpt:"推荐视频： Philip Roberts  JSConf EU 2014 Erin Zimmer JSConf EU 2018 Jake Archibald JSConf.Asia 2018 Javascription的运行时环境其实最核心的两个部分就是Call Stack…",fields:{slug:"/事件循环原理/"},frontmatter:{date:"26 November, 2017",title:"事件循环"}}},{node:{excerpt:"",fields:{slug:"/一个极简的Promise垫片实现/"},frontmatter:{date:"06 September, 2017",title:"一个极简的Promise垫片实现"}}},{node:{excerpt:"与性能相关的事情不应该拖到项目的最后来做，要在项目的设计之初就开始考虑，这样才可以使性能的各种隐形需求完美地整合到项目中，随着项目一起推进 前端是庞大的，包括 HTML、CSS、 Javascript、Image 和 Font…",fields:{slug:"/网站性能优化总结/"},frontmatter:{date:"16 July, 2017",title:"网站性能优化总结"}}},{node:{excerpt:"脚手架工具： 组件案例： prop和state的使用方法和React一致，所有的样式都通过style注入，只把应用作为一个整体注册一次，而不是每个组件/模块都注册 另外，React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点 常用的View…",fields:{slug:"/React-Native入门笔记/"},frontmatter:{date:"26 June, 2017",title:"React-Native入门"}}},{node:{excerpt:"在C之类的语言中，开发者必须手动地调用和释放内存，也就是手动地调用malloc()、calloc()、realloc() 和 free() 等方法，而在 Java或者Javascript…",fields:{slug:"/内存管理与垃圾回收/"},frontmatter:{date:"29 April, 2017",title:"内存管理与垃圾回收"}}},{node:{excerpt:"原型",fields:{slug:"/Javascript忍者禁术笔记-Object/"},frontmatter:{date:"15 April, 2017",title:"Javascript忍者禁术笔记-Object"}}},{node:{excerpt:"函数的特性 函数可以看作一种特殊的对象，可以赋值给变量，也可以作为同步或者异步的回调，同时也可以具有属性，可以记录执行的结果 创建函数的方法有很多，function声明、箭头函数、Function构造器、generator函数，函数可以作为其他函数的返回 创建函数 IIFE…",fields:{slug:"/Javascript忍者禁术笔记-Function/"},frontmatter:{date:"13 April, 2017",title:"Javascript忍者禁术笔记-Function"}}},{node:{excerpt:"运行机制 javascript是解释型语言，采用JIT(Just In Time)机制，运行用机器码并不是提前生成的(AOT, Ahead Of Time)，这是与C等编译型语言的主要不同之一，javascript…",fields:{slug:"/Javascript忍者禁术笔记-Runtime/"},frontmatter:{date:"10 April, 2017",title:"Javascript忍者禁术笔记-Runtime"}}},{node:{excerpt:"CommonJS模式 CommonJS是Node的主要模块机制，从设计的出发点就是考虑了服务端开发，关键字只有require和module.exports，exports是一个特殊属性，所有对它的赋值都会被export…",fields:{slug:"/JS的模块系统/"},frontmatter:{date:"19 January, 2017",title:"JS的模块系统"}}},{node:{excerpt:"用scope避免命名冲突 创建可复用的npm init devDependencies的用外 npm脚本 版本管理 发布管理 安全检查",fields:{slug:"/Npm冷知识/"},frontmatter:{date:"13 January, 2017",title:"Npm冷知识"}}},{node:{excerpt:"变量未定义会报错 删除一个变量/函数/函数参数的时候会报错 重复定义对象属性/函数参数会报错 使用八进制字面量和转义符会报错 删除只读属性会报错，非strict模式下会静默失败 赋值只有getter的属性会报错，非strict…",fields:{slug:"/JS里的严格模式/"},frontmatter:{date:"19 November, 2016",title:"JS里的严格模式"}}}]}},pathContext:{category:"编程"}}}});
//# sourceMappingURL=path---categories-编程-f4bddd2edd48e4ebec6c.js.map