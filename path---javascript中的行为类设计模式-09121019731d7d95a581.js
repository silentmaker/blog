webpackJsonp([0x76f68aed5c73],{454:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Elvin's Blog",author:"Elvin Ma"}},markdownRemark:{id:"/Users/maxingcong/Code/blog/src/pages/Javascript中的行为类设计模式.md absPath of file >>> MarkdownRemark",html:'<p>设计模式有很多种，最早四人帮的书提出设计模式的时候总结了23种设计，加上后来其他开发者对这个基础上的变形和创新，一些讲JS设计模式的书里会有4、50种设计模式，抛开框架模式不说的话，大体可以分为下面三种：</p>\n<ul>\n<li>创建类设计模式</li>\n</ul>\n<p>用于处理对象创建机制，基本上通过控制对象的创建过程来解决问题</p>\n<p>比如，构造函数模式、工厂模式、原型模式和单模式。</p>\n<ul>\n<li>结构类设计模式</li>\n</ul>\n<p>这类模式与对象的组合有关，主要有助于结合或重组一个或多个部件，而不影响整个系统，换句话说，它们有助于在不篡改现有功能的情况下获得新的功能</p>\n<p>比如，适配器模式、复合模式、装饰模式、外观模式、轻量模式和代理模式。</p>\n<ul>\n<li>行为类设计模式</li>\n</ul>\n<p>这类模式涉及改善不同对象之间的通信，比如链式模式、命令模式、调解模式、观察者模式、状态模式、策略模式和模板模式</p>\n<p>下面主要总结下行为类设计模式：</p>\n<h3>链式模式</h3>\n<p>链式模式的一个很好的例子是DOM中的事件冒泡，事件通过一系列嵌套的DOM元素传播，其中任意一个元素都可能有带有相应事件的监听器</p>\n<p>如下，我们创建了一个类Sum，并传值实例化，它有一个方法Add，将传递的值添加到对象的和属性，并返回对象本身，以允许添加方法调用链接，这也是JQuery中可以看到的一种常见模式，几乎所有调用jQuery对象的方法都返回一个jQuery对象，以便方法调用可以链接在一起。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>initial <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> initial<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sum1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 62</span></code></pre>\n      </div>\n<h3>命令模式</h3>\n<p>其目的是把动作或操作封装为对象，通过分离请求操作的对象和执行实际处理的对象来达到系统和类的松散耦合</p>\n<p>用过Redux其实就已经接触过命令模式了，每个action其实都是封装了的操作，从而可以重做或撤消，使得time travel型的调试方法成为可能</p>\n<p>如下我们有一个特殊的类，它具有多个方法和一个命令类，命令类封装了要执行的操作，同时命令类还可以跟踪执行的所有命令，这些命令可用于扩展其功能，比如撤消和重做操作</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">SpecialMath</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_num <span class="token operator">=</span> num<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">square</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 操作封装的具体实现</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_num <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">cube</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_num <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">squareRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>commandsExecuted <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录执行历史</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">execute</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>commandsExecuted<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_subject<span class="token punctuation">[</span>command<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用对应操作</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpecialMath</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">\'square\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nx<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">\'cube\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>commandsExecuted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [\'square\', \'cube\']</span></code></pre>\n      </div>\n<h3>调解模式</h3>\n<p>中介模式封装了对象之间的相互作用，通过使对象彼此相互引用来促进松散耦合</p>\n<p>如下，我们通过ControlTower作为控制飞机间相互影响的调解人，所有的Plane都通过ControlTower.register 来注册，同时ControlTower还负责接收和查询所有Plane的坐标</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ControlTower</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_airplanes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">register</span><span class="token punctuation">(</span>airplane<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 注册Plane的同时Plane也保存对ControlTower的引用</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_airplanes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>airplane<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    airplane<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">requestCoordinates</span><span class="token punctuation">(</span>airplane<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_airplanes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>plane <span class="token operator">=></span> airplane <span class="token operator">!==</span> plane<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>plane <span class="token operator">=></span> plane<span class="token punctuation">.</span>coordinates<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Airplane</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>coordinates<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>coordinates <span class="token operator">=</span> coordinates<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>controlTower <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">register</span><span class="token punctuation">(</span>controlTower<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>controlTower <span class="token operator">=</span> controlTower<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">requestCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>controlTower<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>controlTower<span class="token punctuation">.</span><span class="token function">requestCoordinates</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// usage</span>\n<span class="token keyword">const</span> tower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">controlTower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> airplanes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Airplane</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Airplane</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Airplane</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nairplanes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>airplane <span class="token operator">=></span> <span class="token punctuation">{</span>\n  tower<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>airplane<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>airplanes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>airplane <span class="token operator">=></span> airplane<span class="token punctuation">.</span><span class="token function">requestCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n<span class="token comment">// [[20, 30], [10, 30], [10, 20]]</span></code></pre>\n      </div>\n<h3>观察者模式</h3>\n<p>这个估计是最常见的行为类设计模式了，它定义了对象之间的一对多依赖关系，每当发布者改变其状态时，所有其他订阅者都自动被通知，并对应地更新，所以也称。这也被称为发布/订阅模式或者事件调度模式，addEventListener 就是这个模式中的典型</p>\n<p>如下，我们用写一个Subject类，提供subscribe、unsubscribe和fire方法，fire 方法则遍历已订阅的对象来调用其update方法：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">unsubscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>obs <span class="token operator">=></span> observer <span class="token operator">!==</span> obs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">fire</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>observer <span class="token operator">=></span> <span class="token punctuation">{</span>\n      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>initialState <span class="token operator">=</span> state<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">update</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>change<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token string">\'INC\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">++</span>state<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">case</span> <span class="token string">\'DEC\'</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token operator">--</span>state<span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token punctuation">:</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialState<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> obs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> obs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>obs1<span class="token punctuation">)</span><span class="token punctuation">;</span>\nsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>obs2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsub<span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token string">\'INC\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obs1<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obs2<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span></code></pre>\n      </div>\n<h3>状态模式</h3>\n<p>有时候我们需要让对象根据其内部状态的变化来改变其行为，我们可以封装一组提供特定状态下行为逻辑的对象，每个对象都代表了一种特定的状态</p>\n<p>如下是一个TrafficLight类，模拟了交通灯根据其内部状态改变行为，状态列表是GreenLight或RedLight类的对象实例</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">TrafficLight</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>states <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">GreenLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RedLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>states<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> totalStates <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>states<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>states<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>light <span class="token operator">=></span> light <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> totalStates<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>states<span class="token punctuation">[</span>currentIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>states<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用对应状态函数的行为方法</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">RedLight</span> <span class="token keyword">extends</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">\'red\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'STOP\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">GreenLight</span> <span class="token keyword">extends</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">\'green\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'GO\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// usage</span>\n<span class="token keyword">const</span> trafficLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrafficLight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trafficLight<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'GO\'</span>\ntrafficLight<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trafficLight<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'STOP\'</span>\ntrafficLight<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trafficLight<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'GO\'</span></code></pre>\n      </div>\n<h3>策略模式</h3>\n<p>策略械是指通过定义了一系列算法并将封装起来，然后在运行时调用者可以自由地交换策略</p>\n<p>如下，我们定义一个Commute类，同时用Bus、Taxi和PersonalCar来封装所有可能的出行策略，在运行时我们可以通过Commute.travel来更换出行方法</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Commute</span> <span class="token punctuation">{</span>\n  <span class="token function">travel</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> transport<span class="token punctuation">.</span><span class="token function">travelTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token function">travelTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_timeTaken<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 策略1</span>\n<span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_timeTaken <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 策略2</span>\n<span class="token keyword">class</span> <span class="token class-name">Taxi</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_timeTaken <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 策略3</span>\n<span class="token keyword">class</span> <span class="token class-name">PersonalCar</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_timeTaken <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// usage</span>\n<span class="token keyword">const</span> commute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Commute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commute<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Taxi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>commute<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></code></pre>\n      </div>\n<h3>模板模式</h3>\n<p>模板模式是指，先定义算法的骨架，将具体的实现步骤放到子类，允许子类重新定义算法的某些步骤而不改变算法的外部结构，类似 Java 中的 implements，这里就不举例说明了</p>',
frontmatter:{title:"Javascript中的行为类设计模式",tags:["javascript"],categories:["编程"],date:"August 10, 2017"}}},pathContext:{slug:"/Javascript中的行为类设计模式/",previous:{fields:{slug:"/数据库分类笔记/"},frontmatter:{path:"/types-of-database",title:"数据库分类笔记",tags:null,categories:["编程"]}},next:{fields:{slug:"/Promise及其垫片实现/"},frontmatter:{path:"/a-tiny-promise-polyfill",title:"Promise及其垫片实现",tags:["javascript"],categories:["编程"]}}}}}});
//# sourceMappingURL=path---javascript中的行为类设计模式-09121019731d7d95a581.js.map