webpackJsonp([0x882bd4d92e28],{467:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Elvin's Blog",author:"Elvin Ma"}},markdownRemark:{id:"/Users/maxingcong/Code/blog/src/pages/Web Worker笔记.md absPath of file >>> MarkdownRemark",html:'<p><strong>Worker</strong> 是在 Javascript 中实现多线程的一种方法，通常用于进行耗时/次要的任务，可以提高计算速度，并且达到不阻塞UI的目的</p>\n<p>在 Web Workers API 中，Worker可以分为 <em>dedicated Woker</em>，<em>SharedWorker</em> 和 <em>ServiceWorker</em>，\n其 constructor 为分别为 <em>Worker</em>，<em>SharedWorker</em> 和 <em>ServiceWorker</em>，并且都基于 <em>AbstractWorker</em> 实现，\n其 scope 分别为 <em>DedicatedWorkerGlobalScope</em>，<em>SharedWorkerGlobalScope</em> 和 <em>ServiceWorkerGlobalScope</em>，并且都基于 <em>WorkerGlobalScope</em> 实现</p>\n<h3>Worker</h3>\n<p>在同源策略下，Worker也可以创建Worker，不过目前在 Blink/WebKit 等内核中还没有实现</p>\n<p>主线程与Worker线程之间通过很简单的方式通信，核心代码如下</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// main.js</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>Worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">\'worker.js\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    myWorker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n    myWoker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> result <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// worker.js</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token function">computed</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Worker 继承了 EventTarget，并且实现了AbstractWorker的属性和方法：</p>\n<ul>\n<li>AbstractWorker.onerror</li>\n<li>Worker.onmessage</li>\n<li>Worker.onmessageerror</li>\n<li>Worker.postMessage()</li>\n<li>Worker.terminate()</li>\n</ul>\n<p>Worker 可访问的全局变量（大多继承自WorkerGlobalScope，并且只读）：</p>\n<ul>\n<li>self</li>\n<li>navigator</li>\n<li>location</li>\n<li>console</li>\n<li>caches</li>\n<li>indexedDB</li>\n<li>atob/setTimeout/setInterval</li>\n<li>XMLHttpRequest (responseXML和channel属性会一直为null)</li>\n<li>…</li>\n</ul>\n<p>Worker 没有浏览器上下文，故没有 window/document/parent 等全局变量，详细列表可见：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers">https://developer.mozilla.org/en-US/docs/Web/API/Web<em>Workers</em>API/Functions<em>and</em>classes<em>available</em>to_workers</a></p>\n<h3>SharedWorker</h3>\n<p>SharedWorker 是一种特殊的 Worker，在同源策略下，可以从 windows，iframes 和 workers 等不同的上下文中访问到</p>\n<p>SharedWorker 的通信机制和Worker类似，但比Worker多了一层port，在其他上下文中，通过 port.postMessage() 和 port.onmessage 来传递数据，通过 port.start() 来建立连接，而在worker内，则通过SharedWorkerGlobalScope.onconnect 来监听连接请求</p>\n<p>最简示例代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// main-1/2/3.js</span>\n<span class="token keyword">const</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">\'worker.js\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nmyWorker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n$input<span class="token punctuation">.</span><span class="token function-variable function">onchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    myWorker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nmyWorker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// worker.js</span>\n<span class="token function-variable function">onconnect</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> port <span class="token operator">=</span> e<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    \n    port<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    port<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h3>ServiceWorker</h3>\n<p>…</p>',frontmatter:{title:"Web Workers笔记",tags:["Web","Javascript"],categories:["编程"],date:"June 26, 2018"}}},pathContext:{slug:"/Web Worker笔记/",previous:{fields:{slug:"/用D3力导向图做思维导图/"},frontmatter:{path:"/d3-force-and-mindmap",title:"用D3力导向图做思维导图",tags:["javascript"],categories:["dev"]}},next:{fields:{slug:"/AMP简介/"},frontmatter:{path:"/amp-intro",title:"AMP简介",tags:["性能"],categories:["dev"]}}}}}});
//# sourceMappingURL=path---web-worker笔记-b4734f2c83d1a59619de.js.map