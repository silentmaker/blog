{"version":3,"sources":["webpack:///path---业界观察-增量更新静态资源-192c4206a0e8955c3d62.js","webpack:///./.cache/json/业界观察-增量更新静态资源.json"],"names":["webpackJsonp","473","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,8FAAAC,KAAA,q/BAAAC,aAAsnCL,MAAA,kBAAAM,MAAA,MAAAC,YAAA,MAAAC,KAAA,sBAAwFC,aAAgBC,KAAA,oBAAAC,UAAuCC,QAAUF,KAAA,aAAmBL,aAAgBQ,KAAA,sCAAAb,MAAA,UAAAM,KAAA,KAAAC,YAAA,UAAkGO,MAASF,QAAUF,KAAA,mBAAyBL,aAAgBQ,KAAA,4BAAAb,MAAA,gBAAAM,MAAA,MAAAC,YAAA","file":"path---业界观察-增量更新静态资源-192c4206a0e8955c3d62.js","sourcesContent":["webpackJsonp([52577810585130],{\n\n/***/ 473:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/业界观察 - 增量更新静态资源.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>美团金融扫码付采用了ThunderJS + BuildService的方案，优化静态资源加载，通过 <strong>字符级增量更新</strong> 减少文件传输大小，节省流量、提高页面成功率和加载速度</p>\\n<h3>服务机制</h3>\\n<p>ThunderJS，美团内部实现的一款 CMD 模块加载器，基于Meyers Diff算法，通过请求增量文件和本地Patch的方法，更新静态资源</p>\\n<p><img src=\\\".%5Cimages%5Cthunder-js.png\\\" alt=\\\"Downgrade\\\"></p>\\n<h3>计算架构</h3>\\n<p><img src=\\\".%5Cimages%5Casync-service.png\\\" alt=\\\"Build Service\\\"></p>\\n<p>每收到一次增量请求，分别缓存每个资源文件的计算任务输出，不同的资源合并请求可以复用结果片段，减少不必要的计算</p>\\n<p>将计算服务和分发服务分离开来，Brain 服务使用 MySQL 存储计算的唯一标识，每个 trace 可以唯一指代一个计算，每个计算仅允许一个节点执行。当\\b计算任务到达 Brain 服务的随机一个节点后，Brain 服务首先检查是否已经\\b被分配，如果已经分配立即返回状态信息；如果计算任务完成直接路由到对应节点输出结果</p>\\n<p>这个设计使 Brain 服务成为可水平扩展算力的分布式计算和存储服务。计算任务本身改为另起进程，完全避免计算任务和网络服务进程抢占资源的问题。只要部署节点数达到一定数量，集群就可以避免整体被某个慢计算挂起</p>\\n<p>最后是通过实施预热解决超时率，在 ThunderJS 的设计中，文件版本号取自 Git 的 CommitId，每次提交后，即使文件内容没有变化版本号也会递进，但在预热阶段，CommitId 比文件内容的 Hash 值更有价值，通过追踪 Git 提交历史，我们可以很容易的找到所有文件的线上版本，通过埋点计算，线上发版之前预热 5 个版本能将超时率降到1.5%，预热 10 个版本能将超时率降至 1.1%，不过预热也需要时间，需要在预热效果和预热成本之间折衷选择</p>\\n<p>整个方案的优化指标统计：增量更新相比全量请求，传输数据可减少多至99%，合并请求平均可减少请求数95%，增量请求占比大约在35%</p>\",\"frontmatter\":{\"title\":\"业界观察 - 增量更新静态资源\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"January 20, 2019\"}}},\"pathContext\":{\"slug\":\"/业界观察 - 增量更新静态资源/\",\"previous\":{\"fields\":{\"slug\":\"/读人月神话有感/\"},\"frontmatter\":{\"path\":\"/thoughts-on-the-methical-man-month\",\"title\":\"读人月神话有感\",\"tags\":null,\"categories\":[\"项目管理\"]}},\"next\":{\"fields\":{\"slug\":\"/业界观察 - 构建时预渲染/\"},\"frontmatter\":{\"path\":\"/industry-pratice-pre-ssr\",\"title\":\"业界观察 - 构建时预渲染\",\"tags\":[\"前端\"],\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---业界观察-增量更新静态资源-192c4206a0e8955c3d62.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/业界观察 - 增量更新静态资源.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>美团金融扫码付采用了ThunderJS + BuildService的方案，优化静态资源加载，通过 <strong>字符级增量更新</strong> 减少文件传输大小，节省流量、提高页面成功率和加载速度</p>\\n<h3>服务机制</h3>\\n<p>ThunderJS，美团内部实现的一款 CMD 模块加载器，基于Meyers Diff算法，通过请求增量文件和本地Patch的方法，更新静态资源</p>\\n<p><img src=\\\".%5Cimages%5Cthunder-js.png\\\" alt=\\\"Downgrade\\\"></p>\\n<h3>计算架构</h3>\\n<p><img src=\\\".%5Cimages%5Casync-service.png\\\" alt=\\\"Build Service\\\"></p>\\n<p>每收到一次增量请求，分别缓存每个资源文件的计算任务输出，不同的资源合并请求可以复用结果片段，减少不必要的计算</p>\\n<p>将计算服务和分发服务分离开来，Brain 服务使用 MySQL 存储计算的唯一标识，每个 trace 可以唯一指代一个计算，每个计算仅允许一个节点执行。当\\b计算任务到达 Brain 服务的随机一个节点后，Brain 服务首先检查是否已经\\b被分配，如果已经分配立即返回状态信息；如果计算任务完成直接路由到对应节点输出结果</p>\\n<p>这个设计使 Brain 服务成为可水平扩展算力的分布式计算和存储服务。计算任务本身改为另起进程，完全避免计算任务和网络服务进程抢占资源的问题。只要部署节点数达到一定数量，集群就可以避免整体被某个慢计算挂起</p>\\n<p>最后是通过实施预热解决超时率，在 ThunderJS 的设计中，文件版本号取自 Git 的 CommitId，每次提交后，即使文件内容没有变化版本号也会递进，但在预热阶段，CommitId 比文件内容的 Hash 值更有价值，通过追踪 Git 提交历史，我们可以很容易的找到所有文件的线上版本，通过埋点计算，线上发版之前预热 5 个版本能将超时率降到1.5%，预热 10 个版本能将超时率降至 1.1%，不过预热也需要时间，需要在预热效果和预热成本之间折衷选择</p>\\n<p>整个方案的优化指标统计：增量更新相比全量请求，传输数据可减少多至99%，合并请求平均可减少请求数95%，增量请求占比大约在35%</p>\",\"frontmatter\":{\"title\":\"业界观察 - 增量更新静态资源\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"January 20, 2019\"}}},\"pathContext\":{\"slug\":\"/业界观察 - 增量更新静态资源/\",\"previous\":{\"fields\":{\"slug\":\"/读人月神话有感/\"},\"frontmatter\":{\"path\":\"/thoughts-on-the-methical-man-month\",\"title\":\"读人月神话有感\",\"tags\":null,\"categories\":[\"项目管理\"]}},\"next\":{\"fields\":{\"slug\":\"/业界观察 - 构建时预渲染/\"},\"frontmatter\":{\"path\":\"/industry-pratice-pre-ssr\",\"title\":\"业界观察 - 构建时预渲染\",\"tags\":[\"前端\"],\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/业界观察-增量更新静态资源.json\n// module id = 473\n// module chunks = 52577810585130"],"sourceRoot":""}