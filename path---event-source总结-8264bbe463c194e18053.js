webpackJsonp([0x9d08e5939815],{443:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Elvin's Blog",author:"Elvin Ma"}},markdownRemark:{id:"/Users/maxingcong/Code/blog/src/pages/EventSource总结.md absPath of file >>> MarkdownRemark",html:'<h3>服务端推</h3>\n<p>Sever Push, 指的是服务器主动的向客户端发送消息，在基于请求-响应的B/S模式下，消息起点总是来自客户端，因此在应用层之上无法实现简易的服务端推功能</p>\n<p>常见的解决服务端推送的方案是，长轮询Long Pooling 和 websocket全双工通信</p>\n<p>只要服务端给了响应，HTTP连接就结束了，但TCP连接是一个双向的通道，可以保持一段时间不关闭的，因此TCP连接才有真正的长连接和短连接这一说，只要设置Connection为keep-alive就算是长连接，HTTP1.1默认是长连接，即默认Connection的值就是keep-alive</p>\n<p>在长轮询中，服务器如果检测到库存量没有变化的话，将会把当前请求挂起一段时间，一般是几十秒后超时，长轮询也是有坏处的，因为把请求挂起同样会导致资源的浪费，不管是长轮询还是短轮询，都不太适用于客户端数量太多的情况；websocket连接相对而言功能最强大，但是它对服务器要求比较高，在可以使用websocket协议的服务器上尽量采用此种方式；</p>\n<p>HTML5规范中提供了服务端事件EventSource，浏览器在实现了该规范的前提下创建一个EventSource连接后，便可收到服务端的发送的消息，这些消息需要遵循一定的格式，对于前端开发人员而言，只需在浏览器中侦听对应的事件皆可，EventSource的实现方式对客户端开发人员而言非常简单，兼容性上除IE系的浏览器外都良好；在浏览器与服务端需要强交互的场景下，websocket仍是不二的选择</p>\n<h3>浏览器端</h3>\n<p>浏览器端，需要创建一个EventSource对象，并且传入一个服务端的接口URI作为参数。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> evtSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">\'http://localhost:9111/es\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>默认EventSource对象通过侦听“message”事件获取服务端传来的消息，“open”事件则在http连接建立后触发，”error“事件会在通信错误（连接中断、服务端返回数据失败）的情况下触发。同时，EventSource规范允许服务端指定自定义事件，客户端侦听该事件即可。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">evtSource<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'message\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nevtSource<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>；</code></pre>\n      </div>\n<h3>服务端</h3>\n<p>事件流的对应MIME格式为<strong>text/event-stream</strong>，而且其基于HTTP长连接，如果是HTTP1.0的服务器需要特殊设置；服务端返回数据需要特殊的格式，它分为四种消息类型：event, data, id, retry</p>\n<p><strong>event</strong>指定自定义消息的名称，如<strong>event: customMessage</strong></p>\n<p><strong>data</strong>指定具体的消息体，可以是对象或者字符串，在消息体后面有两个换行符\\n，代表当前消息体发送完毕，一个换行符标识当前消息并未结束，浏览器需要等待后面数据的到来后再触发事件；</p>\n<p><strong>id</strong>为当前消息的标识符，可以不设置。一旦设置则在浏览器端的eventSource对象中就会有体现，该字段使用场景不大;</p>\n<p><strong>retry</strong>设置当前http连接失败后，重新连接的间隔，EventSource规范规定，客户端在http连接失败后默认进行重新连接，重连间隔为3s，通过设置retry字段可指定重连间隔</p>\n<p>Koa的服务端示例代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> PassThrough <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'stream\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>PassThrough<span class="token punctuation">;</span>\n<span class="token keyword">var</span> Readable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'stream\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Readable<span class="token punctuation">;</span>\n<span class="token keyword">var</span> koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'koa\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'koa-router\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token constant">RR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    Readable<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token constant">RR</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Readable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token constant">RR</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_read</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n\nrouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">\'content-type\'</span><span class="token punctuation">,</span><span class="token string">\'text/html\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">\'eventServer.html\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">sse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stream<span class="token punctuation">,</span>event<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> stream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`event:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> event <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\ndata: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n\\n`</span></span><span class="token punctuation">)</span>\n<span class="token comment">//    return stream.write(`event:${ event }\\ndata: ${ JSON.stringify(data) }\\n\\n`);</span>\n<span class="token punctuation">}</span>\nrouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">\'/es\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">var</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//PassThrough();</span>\n    ctx<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string">\'Content-Type\'</span><span class="token punctuation">:</span><span class="token string">\'text/event-stream\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'Cache-Control\'</span><span class="token punctuation">:</span><span class="token string">\'no-cache\'</span><span class="token punctuation">,</span>\n        Connection<span class="token punctuation">:</span> <span class="token string">\'keep-alive\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">sse</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">\'test\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">"yango"</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span> <span class="token string">"tango"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> stream<span class="token punctuation">;</span>\n    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n        <span class="token function">sse</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span><span class="token string">\'test\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">"yango"</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9111</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'listening port 9111\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>页面代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n        hello world\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">\n        <span class="token keyword">var</span> infoShow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#info\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> se <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventSource</span><span class="token punctuation">(</span><span class="token string">\'http://localhost:9111/es\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        se<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'test\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            infoShow<span class="token punctuation">.</span>textContent <span class="token operator">+=</span> e<span class="token punctuation">.</span>data<span class="token operator">+</span><span class="token string">\'\\n\'</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        se<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>\n      </div>',frontmatter:{title:"EventSource总结",tags:null,categories:["编程"],date:"January 11, 2018"}}},pathContext:{slug:"/EventSource总结/",previous:{fields:{slug:"/关于大前端/"},frontmatter:{path:"/about-the-big-frontend",title:"关于大前端",tags:["前端"],categories:["编程"]}},next:{fields:{slug:"/用OpenConnectSever搭建VPN/"},frontmatter:{path:"/ocserv-letsencrypt-vpn",title:"OpenConnectSever搭建VPN总结",tags:null,categories:["编程"]}}}}}});
//# sourceMappingURL=path---event-source总结-8264bbe463c194e18053.js.map