{"version":3,"sources":["webpack:///path---intersection-observer和懒加载优化-4c7369e0eab7b7132364.js","webpack:///./.cache/json/intersection-observer和懒加载优化.json"],"names":["webpackJsonp","453","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,yGAAAC,KAAA,mydAAkreC,aAAuVL,MAAA,6BAAAM,MAAA,cAAAC,YAAA,MAAAC,KAAA,uBAA4GC,aAAgBC,KAAA,+BAAAC,UAAkDC,QAAUF,KAAA,WAAiBL,aAAgBQ,KAAA,0BAAAb,MAAA,QAAAM,MAAA,QAAAC,YAAA,QAAsFO,KAAA","file":"path---intersection-observer和懒加载优化-4c7369e0eab7b7132364.js","sourcesContent":["webpackJsonp([37696016691192],{\n\n/***/ 453:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/IntersectionObserver和懒加载优化.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>延迟加载的目的在于让用户只在他们需要时才下载他们需要的东西</p>\\n<p>比如，当用户浏览一个很多图片的页面，图片进入可见区域时才加载，可以节省带宽，并且能让网页加载更快</p>\\n<p>图片懒加载的概念已经是老生常谈了，不过以前大部分用于懒加载的库都是用滚动事件或者定时器来检查元素是否进入视区的，这类方法的问题是会可能导致浏览器重新布局和重绘，有时候还会导致卡顿</p>\\n<h3>IntersectionObserver</h3>\\n<p>IntersectionObserver 是一个用于检测被观察元素何时进入或离开了浏览器视窗的Web API，大多数现代浏览器都已经支持，而且它是观察者模式的异步传调用，不会影响主线程，可以说是一个为了懒加载而生的API</p>\\n<p>为了更好地复用，我们可以通过Web Component 或者 Vue 抽取一个<code class=\\\"language-text\\\">&lt;lazy-img&gt;</code>组件，这里用Web Component举例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">LazyImage</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">HTMLElement</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">observedAttributes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// width/height可以用于保留空间，防止页面跳动</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'src'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'width'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'height'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// 删掉所有子元素，比如用于显示loading/title的</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> child <span class=\\\"token keyword\\\">of</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>childNodes<span class=\\\"token punctuation\\\">)</span> \\n                child<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 实际鉵发图片加载</span>\\n    <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">visible</span><span class=\\\"token punctuation\\\">(</span>visible<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>visible <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token function\\\">attributeChangeCallback</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">,</span> newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">switch</span> name<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'src'</span><span class=\\\"token punctuation\\\">:</span>\\n            \\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>oldVal <span class=\\\"token operator\\\">===</span> newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n            \\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> newVal<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n             <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'width'</span><span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>newVal<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">px`</span></span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n             <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'height'</span><span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>newVal<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">px`</span></span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ncustomElements<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lazy-img'</span><span class=\\\"token punctuation\\\">,</span> LazyImage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>有了组件之后，就可以写观察元素的代码了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> images <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelectAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lazy-img'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> io <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IntersectionObserver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> entry <span class=\\\"token keyword\\\">of</span> entries<span class=\\\"token punctuation\\\">)</span>\\n        entry<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> entry<span class=\\\"token punctuation\\\">.</span>isIntersecting<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> image <span class=\\\"token keyword\\\">of</span> images<span class=\\\"token punctuation\\\">)</span> io<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>image<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>如上IntersectionObserver就可以追踪所有<code class=\\\"language-text\\\">&lt;lazy-img&gt;</code>元素，并在图片进入视窗时加载图片</p>\\n<h3>体验优化</h3>\\n<p>不同大小的图片加载时间也不一样，为了更好的用户体验，我们还应该支持用户点击图片时马上开始加载，因为有时候可能进入视窗的事件会慢一步，另外，在浏览器空闲的时候，应该主动去加载图片，充分利用所谓的Idle时间，这也是 Google 提倡的 RAIL 模型中的一环</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> image <span class=\\\"token keyword\\\">of</span> images<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 订阅事件</span>\\n    io<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>image<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token comment\\\">// 点击触发加载</span>\\n    image<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onclick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        image<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">// 空闲时主动加载</span>\\n    <span class=\\\"token function\\\">requestIdleCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        image<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里用到的<strong>requestIdleCallback</strong>，类似于 requestAnimationFrame，传入requestIdleCallback的回调会在每一帧的空闲时间里运行，也就是除去rAF回调、浏览器repaint和其他JS业务代码占用的时间之外，利用这一小段一小段的空闲时间经常能把未进入视窗的图片也加载完，这就是在懒加载中又做到了预加载</p>\\n<p>如果把requestIdleCallback单独拎出来，并对特定图片加上优先级，因为有些内容可能会相比其他更重要，这样我们就有了带优先级的懒加载：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">requestIdleCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> image <span class=\\\"token keyword\\\">of</span> images<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>image<span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">&amp;&amp;</span> image <span class=\\\"token operator\\\">===</span> target<span class=\\\"token punctuation\\\">)</span> \\t\\n            image<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 更通用的做法是可以抽象一个IdleQueue的任务队列来按优先级加载图片</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>到这里，我们就已经能实现一个比较好的懒加载效果了，不过为了确保兼容性，还要加上特性检测代码，来确定  IntersectionObserver 是否在当前浏览器中可用，如果不可用就立即加载这些图片</p>\\n<p>IntersectionObserver 还可以用来做很多其他事情，比如用于判断某人是否正在查看广告，或者 iframe 的元素是否在视区中</p>\\n<p>最后附上一篇推荐阅读：<a href=\\\"https://philipwalton.com/articles/idle-until-urgent/\\\">Idle Until Urgent</a></p>\",\"frontmatter\":{\"title\":\"IntersectionObserver和懒加载优化\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"February 20, 2019\"}}},\"pathContext\":{\"slug\":\"/IntersectionObserver和懒加载优化/\",\"previous\":{\"fields\":{\"slug\":\"/关于管理者/\"},\"frontmatter\":{\"path\":\"/thoughts-on-leadership\",\"title\":\"关于管理者\",\"tags\":[\"项目管理\"],\"categories\":[\"随笔\"]}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---intersection-observer和懒加载优化-4c7369e0eab7b7132364.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/IntersectionObserver和懒加载优化.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>延迟加载的目的在于让用户只在他们需要时才下载他们需要的东西</p>\\n<p>比如，当用户浏览一个很多图片的页面，图片进入可见区域时才加载，可以节省带宽，并且能让网页加载更快</p>\\n<p>图片懒加载的概念已经是老生常谈了，不过以前大部分用于懒加载的库都是用滚动事件或者定时器来检查元素是否进入视区的，这类方法的问题是会可能导致浏览器重新布局和重绘，有时候还会导致卡顿</p>\\n<h3>IntersectionObserver</h3>\\n<p>IntersectionObserver 是一个用于检测被观察元素何时进入或离开了浏览器视窗的Web API，大多数现代浏览器都已经支持，而且它是观察者模式的异步传调用，不会影响主线程，可以说是一个为了懒加载而生的API</p>\\n<p>为了更好地复用，我们可以通过Web Component 或者 Vue 抽取一个<code class=\\\"language-text\\\">&lt;lazy-img&gt;</code>组件，这里用Web Component举例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">LazyImage</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">HTMLElement</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">observedAttributes</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// width/height可以用于保留空间，防止页面跳动</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'src'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'width'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'height'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Image</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token comment\\\">// 删掉所有子元素，比如用于显示loading/title的</span>\\n            <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> child <span class=\\\"token keyword\\\">of</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>childNodes<span class=\\\"token punctuation\\\">)</span> \\n                child<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">remove</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 实际鉵发图片加载</span>\\n    <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">visible</span><span class=\\\"token punctuation\\\">(</span>visible<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>visible <span class=\\\"token operator\\\">||</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token function\\\">attributeChangeCallback</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> oldVal<span class=\\\"token punctuation\\\">,</span> newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">switch</span> name<span class=\\\"token punctuation\\\">:</span>\\n            <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'src'</span><span class=\\\"token punctuation\\\">:</span>\\n            \\t<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>oldVal <span class=\\\"token operator\\\">===</span> newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n            \\t<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> newVal<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n             <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'width'</span><span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>newVal<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">px`</span></span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n             <span class=\\\"token keyword\\\">case</span> <span class=\\\"token string\\\">'height'</span><span class=\\\"token punctuation\\\">:</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>img<span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>style<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>newVal<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">px`</span></span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\ncustomElements<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">define</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lazy-img'</span><span class=\\\"token punctuation\\\">,</span> LazyImage<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>有了组件之后，就可以写观察元素的代码了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> images <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">querySelectAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'lazy-img'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> io <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">IntersectionObserver</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>entries<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> entry <span class=\\\"token keyword\\\">of</span> entries<span class=\\\"token punctuation\\\">)</span>\\n        entry<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> entry<span class=\\\"token punctuation\\\">.</span>isIntersecting<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> image <span class=\\\"token keyword\\\">of</span> images<span class=\\\"token punctuation\\\">)</span> io<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>image<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>如上IntersectionObserver就可以追踪所有<code class=\\\"language-text\\\">&lt;lazy-img&gt;</code>元素，并在图片进入视窗时加载图片</p>\\n<h3>体验优化</h3>\\n<p>不同大小的图片加载时间也不一样，为了更好的用户体验，我们还应该支持用户点击图片时马上开始加载，因为有时候可能进入视窗的事件会慢一步，另外，在浏览器空闲的时候，应该主动去加载图片，充分利用所谓的Idle时间，这也是 Google 提倡的 RAIL 模型中的一环</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> image <span class=\\\"token keyword\\\">of</span> images<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 订阅事件</span>\\n    io<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>image<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token comment\\\">// 点击触发加载</span>\\n    image<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onclick</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        image<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">// 空闲时主动加载</span>\\n    <span class=\\\"token function\\\">requestIdleCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        image<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>这里用到的<strong>requestIdleCallback</strong>，类似于 requestAnimationFrame，传入requestIdleCallback的回调会在每一帧的空闲时间里运行，也就是除去rAF回调、浏览器repaint和其他JS业务代码占用的时间之外，利用这一小段一小段的空闲时间经常能把未进入视窗的图片也加载完，这就是在懒加载中又做到了预加载</p>\\n<p>如果把requestIdleCallback单独拎出来，并对特定图片加上优先级，因为有些内容可能会相比其他更重要，这样我们就有了带优先级的懒加载：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token function\\\">requestIdleCallback</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> image <span class=\\\"token keyword\\\">of</span> images<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>image<span class=\\\"token punctuation\\\">.</span>loaded <span class=\\\"token operator\\\">&amp;&amp;</span> image <span class=\\\"token operator\\\">===</span> target<span class=\\\"token punctuation\\\">)</span> \\t\\n            image<span class=\\\"token punctuation\\\">.</span>visible <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 更通用的做法是可以抽象一个IdleQueue的任务队列来按优先级加载图片</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>到这里，我们就已经能实现一个比较好的懒加载效果了，不过为了确保兼容性，还要加上特性检测代码，来确定  IntersectionObserver 是否在当前浏览器中可用，如果不可用就立即加载这些图片</p>\\n<p>IntersectionObserver 还可以用来做很多其他事情，比如用于判断某人是否正在查看广告，或者 iframe 的元素是否在视区中</p>\\n<p>最后附上一篇推荐阅读：<a href=\\\"https://philipwalton.com/articles/idle-until-urgent/\\\">Idle Until Urgent</a></p>\",\"frontmatter\":{\"title\":\"IntersectionObserver和懒加载优化\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"February 20, 2019\"}}},\"pathContext\":{\"slug\":\"/IntersectionObserver和懒加载优化/\",\"previous\":{\"fields\":{\"slug\":\"/关于管理者/\"},\"frontmatter\":{\"path\":\"/thoughts-on-leadership\",\"title\":\"关于管理者\",\"tags\":[\"项目管理\"],\"categories\":[\"随笔\"]}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/intersection-observer和懒加载优化.json\n// module id = 453\n// module chunks = 37696016691192"],"sourceRoot":""}