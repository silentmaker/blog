webpackJsonp([0xb1c9b4629b57],{467:function(e,t){e.exports={data:{site:{siteMetadata:{title:"Elvin's Blog"}},allMarkdownRemark:{edges:[{node:{excerpt:"…",fields:{slug:"/IntersectionObserver和懒加载优化/"},frontmatter:{date:"20 February, 2019",title:"IntersectionObserver和懒加载优化"}}},{node:{excerpt:"美团支付团队采用的优于CSR和SSR的页面方案，主要用于减少白屏时间，提高用户体验 白屏原因 浏览器渲染包含 HTML 解析、DOM 树构建、CSSOM 构建、JavaScript 解析、布局、绘制等等： 等待 HTML 文档返回，此时处于白屏状态 对 HTML…",fields:{slug:"/业界观察 - 构建时预渲染/"},frontmatter:{date:"21 January, 2019",title:"业界观察 - 构建时预渲染"}}},{node:{excerpt:"美团金融扫码付采用了ThunderJS + BuildService的方案，优化静态资源加载，通过  字符级增量更新  减少文件传输大小，节省流量、提高页面成功率和加载速度 服务机制 ThunderJS，美团内部实现的一款 CMD 模块加载器，基于Meyers Diff…",fields:{slug:"/业界观察 - 增量更新静态资源/"},frontmatter:{date:"20 January, 2019",title:"业界观察 - 增量更新静态资源"}}},{node:{excerpt:"无事总结了下自己习惯用的Vue项目文件结构 清晰的项目结构有助于项目增长过程中的代码规范和质量管理，合理的项目结构能帮助新人更快地把握项目代码，自己开发时思路也会更加清晰，复用性的代码要支持按模块引入，减少多余的打包体积",fields:{slug:"/Vue项目结构总结/"},frontmatter:{date:"03 December, 2018",title:"Vue项目结构总结"}}},{node:{excerpt:"代码分片指的是在构建打包的过程中，把代码分成片段打包为块文件的过程，并在页面需要时加载 现在Webpack推荐的文件打包后的大小标准是：js < 200kb，css < 100kb，coverage > 90% Coverage…",fields:{slug:"/代码分片的常见场景/"},frontmatter:{date:"06 August, 2018",title:"代码分片的常见场景"}}},{node:{excerpt:"RAIL is a User-centric performance model that breaks down the user’s experience into key actions. Every web app has four distinct aspects to…",fields:{slug:"/RAIL性能模型笔记/"},frontmatter:{date:"26 July, 2018",title:"RAIL性能模型笔记"}}},{node:{excerpt:"加速的移动网页 AMP, Accelerated Mobile Page，是google一个团队提出来的性能优化技术，目标是加快移动端页面呈现速度，提高整体体验 AMP 主要由 AMP HTML、AMP JS 以及 AMP Cache 三部分组成，其中，AMP HTML…",fields:{slug:"/AMP简介/"},frontmatter:{date:"22 July, 2018",title:"AMP简介"}}},{node:{excerpt:"很多性能优化比较关注于Page Load Time (PLT)，比如经典的雅虎14条中提到的合并请求和压缩静态资源等等，但除去网站加载的时间以外，用户大部分的时间是花在与页面的交互上 因此页面渲染的性能也是关键优化点，包括UI反馈和动画等，最终目标都是提供给用户60fps…",fields:{slug:"/页面渲染问题总结/"},frontmatter:{date:"25 May, 2018",title:"页面渲染问题总结"}}},{node:{excerpt:"…",fields:{slug:"/前端工程师的一专多长/"},frontmatter:{date:"17 May, 2018",title:"前端工程师的一专多长"}}},{node:{excerpt:"后端监控  - 采集服务器以及链路上各种中间件的数据\n 前端监控  - 运行在用户终端上的代码 最简实现：通过 window.onerror 采集到所有的未捕获异常，并通过 new Image() 的方式构造一个 404 的 HTTP 请求，最后在服务端实时过滤 access…",fields:{slug:"/前端监控系统总结/"},frontmatter:{date:"06 April, 2018",title:"前端监控系统总结"}}},{node:{excerpt:"大前端，简而言之，就是统一三端的开发( Web, Desktop, Mobile) 现在前端涉及的领域十分广泛，各种技术层出不穷—— 在多媒体领域，比如基于 WebRTC 的语音视频通话，基于P2P + CDN的流建媒体分发网络技术 在图形学领域，比如AR / VR…",fields:{slug:"/关于大前端/"},frontmatter:{date:"26 December, 2017",title:"关于大前端"}}},{node:{excerpt:"与性能相关的事情不应该拖到项目的最后来做，要在项目的设计之初就开始考虑，这样才可以使性能的各种隐形需求完美地整合到项目中，随着项目一起推进 前端是庞大的，包括 HTML、CSS、 Javascript、Image 和 Font…",fields:{slug:"/网站性能优化总结/"},frontmatter:{date:"16 July, 2017",title:"网站性能优化总结"}}}]}},pathContext:{tag:"前端"}}}});
//# sourceMappingURL=path---tags-前端-9235d2abfe4d5e8b1da5.js.map