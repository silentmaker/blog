webpackJsonp([67335324583948],{464:function(e,t){e.exports={data:{site:{siteMetadata:{title:"Elvin's Blog"}},allMarkdownRemark:{edges:[{node:{excerpt:"Koa是Express的维护者们基于更简洁稳定和更充分利用Async/Await异步模式的目标重写的web框架，不自带任何中间件，Koa本身可以看作对http库的一层封装，一个Koa应用的开发可以理解为一系列中间件的组合 级联中间件 当中间件用异步方式调用next…",fields:{slug:"/Koa入门笔记/"},frontmatter:{date:"29 November, 2018",title:"Koa入门笔记"}}},{node:{excerpt:"之前看VueConf，有一个Lightning Talk的内容挺有趣的，基本思路大概就是，Vue组件不一定要用来渲染HTML，或者说用组件这种声明式的写法可以做一些别的事情 下面提到的在Github上可以找到对应的项目： vue-motion 、 vue-promised…",fields:{slug:"/用Vue写不是组件的组件/"},frontmatter:{date:"22 November, 2018",title:"用D3力导向图做思维导图"}}},{node:{excerpt:"假设有一个业务场景是这样的，根据一个微博或者其他社交媒体的图片搜索接口，不停地切换展示图片，比如说不断切换微博有关于猫的图片，每张图片只展示一次，常见的思路就是分页+轮询 对于这种生成不间断的数据流的模式，其实也可以用迭代器和generator的思路来做： switchCat…",fields:{slug:"/Generator与asyncIterator/"},frontmatter:{date:"06 November, 2018",title:"Generator与asyncIterator"}}},{node:{excerpt:"SFC，Single File Component，Vue所谓的单文件组件，有时你可能需要快捷地把组件发布到npm给其他人使用，国外有开发者在VueConf分享了一套简便的模板，后来发现Vue Cookbook也已经采纳为一种推荐做法了 项目的地址是： vue-sfc…",fields:{slug:"/快捷发布Vue的单文件组件/"},frontmatter:{date:"02 October, 2018",title:"快捷发布Vue的单文件组件"}}},{node:{excerpt:"在之前的博客里我提到过用Canvas实现天气效果，后面我偶然用Chrome的Performance Monitor查看这个页面的内存情况，发现切换几次天气后，CPU占用率从20%升到了90%，断定有性能效果，初步猜测是有内部自动GC…",fields:{slug:"/性能问题排查 - bind(this)/"},frontmatter:{date:"21 August, 2018",title:"性能问题排查: bind(this)"}}},{node:{excerpt:"Everything is an element. Concepts Polymer lets you build encapsulated, reusable  Web Components  that work just like standard HTML elements…",fields:{slug:"/Ploymer入门/"},frontmatter:{date:"26 July, 2018",title:"Ploymer入门"}}},{node:{excerpt:"Redux 创建Store 使用Store React Redux 通过Provider注入store 状态映射 简化版本如下 合并Reducers Redux Middleware 创建中间件 应用中间件 其他 Redux Documentation",fields:{slug:"/Redux基础/"},frontmatter:{date:"26 July, 2018",title:"Redux基础"}}},{node:{excerpt:"Javascript是一门天生有异步基因的语言，这是由于事件循环和浏览器的交互机制等原因决定的 对于异步流程的控制，我们经历了从最早的 callback，然后是 Promise，到现在的Async/Await和Generator，方式变得越来越灵活 Async/Await…",fields:{slug:"/异步流程控制与错误处理/"},frontmatter:{date:"12 July, 2018",title:"异步流程控制与错误处理"}}},{node:{excerpt:"最近两天在书店看完了《精通D3.js：交互式数据可视化高级编程》和一本讲解思维导思的书，于是便着手用D3.js来实现一个自用的思维导图 D3.js D3.js，Data-Driver-Document数据驱动文档，是一个用来做数据可视化的js…",fields:{slug:"/用D3力导向图做思维导图/"},frontmatter:{date:"20 June, 2018",title:"用D3力导向图做思维导图"}}},{node:{excerpt:"ThreeJS是一个优秀的webGL开源库，它简化了浏览器3D编程，对复杂的webGL语法进行了封装,使得开发者可以直接使用JavaScript在浏览器中创建复杂多变的全景3D场景. 使用ThreeJS的核心步骤是： 设置渲染器renderer 设置摄像机camera…",fields:{slug:"/ThreeJS基础/"},frontmatter:{date:"04 June, 2018",title:"ThreeJS基础"}}},{node:{excerpt:"P5.js P5.js源于Processing，它们原来的出发点都是使图形编程可供艺术家，设计师，教育工作者和初学者使用，而Processing是很多年前提出的技术了，其实现其实是使用regex将Java转换为JS，而P5.js则是以原生JavaScript…",fields:{slug:"/P5.js和贪吃蛇游戏/"},frontmatter:{date:"02 February, 2018",title:"P5.js和贪吃蛇游戏"}}},{node:{excerpt:"从最简单的方式开始 通常方法我们会提取到prototype中复用以节约内存 但是这样并没有达到真正私有变量的目的，只是单纯地用了命名惯例而已，于是可以算要用一个闭包才形有私有作用域 但这些多个Person类间的name…",fields:{slug:"/如何实现javascript的私有变量/"},frontmatter:{date:"26 January, 2018",title:"如何实现javascript的私有变量"}}},{node:{excerpt:"箭头函数用起来比较潮，但是原来的函数写法依旧有其用处，毕竟这两者还有很多不等价的情况 箭头函数缺失的东西 没有自己的 this ，其this是由执行时在当前scope中继承的 没有 prototype 属性，所以用于new，如 没有 arguments 对象，也没有 new…",fields:{slug:"/箭头函数总结/"},frontmatter:{date:"26 December, 2017",title:"箭头函数总结"}}},{node:{excerpt:"Promise 是异步编程的一种解决方案，比传统的解决方案 - 函数回调和事件，更合理和更强大，最早是由社区提出和实现的，后来ES…",fields:{slug:"/Promise及其垫片实现/"},frontmatter:{date:"06 September, 2017",title:"Promise及其垫片实现"}}},{node:{excerpt:"设计模式有很多种，最早四人帮的书提出设计模式的时候总结了23种设计，加上后来其他开发者对这个基础上的变形和创新，一些讲JS设计模式的书里会有4、5…",fields:{slug:"/Javascript中的行为类设计模式/"},frontmatter:{date:"10 August, 2017",title:"Javascript中的行为类设计模式"}}},{node:{excerpt:"脚手架工具： 组件案例： prop和state的使用方法和React一致，所有的样式都通过style注入，只把应用作为一个整体注册一次，而不是每个组件/模块都注册 另外，React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点 常用的View…",fields:{slug:"/React-Native入门笔记/"},frontmatter:{date:"26 June, 2017",title:"React-Native入门"}}},{node:{excerpt:"Proxy是一种特殊对象，可以用于代理其他对象的操作，或者说拦截了对其他对象的操作，从而可以实现对对象的监听，添加自定义逻辑，或者进行日志记录或者性能测试等操作 Proxy可以代理以下事件： apply，当调用函数的时候激活 construct，当通过 new…",fields:{slug:"/使用Proxy监听对象/"},frontmatter:{date:"25 May, 2017",title:"使用Proxy监听对象"}}},{node:{excerpt:"在C之类的语言中，开发者必须手动地调用和释放内存，也就是手动地调用malloc()、calloc()、realloc() 和 free() 等方法，而在 Java或者Javascript…",fields:{slug:"/内存管理与垃圾回收/"},frontmatter:{date:"29 April, 2017",title:"内存管理与垃圾回收"}}},{node:{excerpt:"原型链 原型是JS中的一个基本概念，所有的对象包括Object、Function、Array和Map等都有原型，原型能过prototype的引用指用其他对象，从而形成了原型链，对象的属性和方法可以通过原型链委托给其他对象，从而使得JS具有了模拟继承的能力 可以能过直接赋值Obj…",fields:{slug:"/Javascript忍者禁术笔记-Object/"},frontmatter:{date:"15 April, 2017",title:"Javascript忍者禁术笔记-Object"}}},{node:{excerpt:"函数的特性 函数可以看作一种特殊的对象，可以赋值给变量，也可以作为同步或者异步的回调，同时也可以具有属性，可以记录执行的结果 创建函数的方法有很多，function声明、箭头函数、Function构造器、generator函数，函数可以作为其他函数的返回 创建函数 IIFE…",fields:{slug:"/Javascript忍者禁术笔记-Function/"},frontmatter:{date:"13 April, 2017",title:"Javascript忍者禁术笔记-Function"}}},{node:{excerpt:"运行机制 javascript是解释型语言，采用JIT(Just In Time)机制，运行用机器码并不是提前生成的(AOT, Ahead Of Time)，这是与C等编译型语言的主要不同之一，javascript…",fields:{slug:"/Javascript忍者禁术笔记-Runtime/"},frontmatter:{date:"10 April, 2017",title:"Javascript忍者禁术笔记-Runtime"}}},{node:{excerpt:"CommonJS模式 CommonJS是Node的主要模块机制，从设计的出发点就是考虑了服务端开发，关键字只有require和module.exports，exports是一个特殊属性，所有对它的赋值都会被export…",fields:{slug:"/JS的模块系统/"},frontmatter:{date:"19 January, 2017",title:"JS的模块系统"}}},{node:{excerpt:"变量未定义会报错 删除一个变量/函数/函数参数的时候会报错 重复定义对象属性/函数参数会报错 使用八进制字面量和转义符会报错 删除只读属性会报错，非strict模式下会静默失败 赋值只有getter的属性会报错，非strict…",fields:{slug:"/JS里的严格模式/"},frontmatter:{date:"19 November, 2016",title:"JS里的严格模式"}}}]}},pathContext:{tag:"Javascript"}}}});
//# sourceMappingURL=path---tags-javascript-dfd54f603610623c2623.js.map