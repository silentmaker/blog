{"version":3,"sources":["webpack:///path---代码分片的常见场景-194cca6a94a371ca7165.js","webpack:///./.cache/json/代码分片的常见场景.json"],"names":["webpackJsonp","477","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,wFAAAC,KAAA,qzGAAuyGC,aAAqPL,MAAA,YAAAM,MAAA,MAAAC,YAAA,MAAAC,KAAA,qBAAiFC,aAAgBC,KAAA,cAAAC,UAAiCC,QAAUF,KAAA,eAAqBL,aAAgBQ,KAAA,wBAAAb,MAAA,YAAAM,MAAA,cAAAC,YAAA,QAA8FO,MAASF,QAAUF,KAAA,sBAA4BL,aAAgBQ,KAAA,qCAAAb,MAAA,mBAAAM,KAAA,KAAAC,YAAA","file":"path---代码分片的常见场景-194cca6a94a371ca7165.js","sourcesContent":["webpackJsonp([101225518726340],{\n\n/***/ 477:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/代码分片的常见场景.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>代码分片指的是在构建打包的过程中，把代码分成片段打包为块文件的过程，并在页面需要时加载</p>\\n<p>现在Webpack推荐的文件打包后的大小标准是：js &#x3C; 200kb，css &#x3C; 100kb，coverage > 90%</p>\\n<p>Coverage是指页面上代码的使用率，也就是有用代码大小占总共加载代码大小的百分比，包括JS和CSS文件，这个数据可以通过Chrome Devtools里的Coverage看到，因为代码分片的一个主要目标是尽量只加载用得到的代码，以提高网页的加载性能，因此，代码分片是解决低Coverage的好方法，而Coverage也是代码分片做得好坏的一个有力指标</p>\\n<h3>常见场景</h3>\\n<p><strong>路由页面组件</strong>，一般都会按路由做分片，因为路由很直观地区别开了当前页面用到和用不到哪些代码；</p>\\n<p><strong>单个业务组件</strong>，要根据组件在页面的显示状态来看，如果组件一开始并不在页面上，而是延迟出现或者要等用户反馈时才出现，则可以考虑做分片，也就是延缓暂时用不到的代码的加载</p>\\n<h3>特殊用法</h3>\\n<p>分片也可以用于给不同的用户加载不同的代码，比如AB测试和加载主题</p>\\n<p><strong>加载不同主题或者皮肤</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getTheme</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`src/themes/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>theme<span class=\\\"token punctuation\\\">.</span>classic<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">getTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'classic'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>module <span class=\\\"token operator\\\">=></span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>theme<span class=\\\"token punctuation\\\">.</span>modern<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">getTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'modern'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>module <span class=\\\"token operator\\\">=></span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>在webpack解析到<code class=\\\"language-text\\\">import(src/themes/)</code>这样的按路径异步引入时，会把文件夹下的所有JS文件分别打包成独立的Chunk文件</p>\\n<h3>CSS分片</h3>\\n<p>Webpack 4 开始也支持css文件的分片了，具体可见 mini-extract-css-plugin</p>\",\"frontmatter\":{\"title\":\"代码分片的常见场景\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"August 06, 2018\"}}},\"pathContext\":{\"slug\":\"/代码分片的常见场景/\",\"previous\":{\"fields\":{\"slug\":\"/Ploymer入门/\"},\"frontmatter\":{\"path\":\"/polymer-introduction\",\"title\":\"Ploymer入门\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/用Canvas实现简单的天气效果/\"},\"frontmatter\":{\"path\":\"/simple-weather-effect-with-canvas\",\"title\":\"用Canvas实现简单的天气效果\",\"tags\":null,\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---代码分片的常见场景-194cca6a94a371ca7165.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/代码分片的常见场景.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>代码分片指的是在构建打包的过程中，把代码分成片段打包为块文件的过程，并在页面需要时加载</p>\\n<p>现在Webpack推荐的文件打包后的大小标准是：js &#x3C; 200kb，css &#x3C; 100kb，coverage > 90%</p>\\n<p>Coverage是指页面上代码的使用率，也就是有用代码大小占总共加载代码大小的百分比，包括JS和CSS文件，这个数据可以通过Chrome Devtools里的Coverage看到，因为代码分片的一个主要目标是尽量只加载用得到的代码，以提高网页的加载性能，因此，代码分片是解决低Coverage的好方法，而Coverage也是代码分片做得好坏的一个有力指标</p>\\n<h3>常见场景</h3>\\n<p><strong>路由页面组件</strong>，一般都会按路由做分片，因为路由很直观地区别开了当前页面用到和用不到哪些代码；</p>\\n<p><strong>单个业务组件</strong>，要根据组件在页面的显示状态来看，如果组件一开始并不在页面上，而是延迟出现或者要等用户反馈时才出现，则可以考虑做分片，也就是延缓暂时用不到的代码的加载</p>\\n<h3>特殊用法</h3>\\n<p>分片也可以用于给不同的用户加载不同的代码，比如AB测试和加载主题</p>\\n<p><strong>加载不同主题或者皮肤</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getTheme</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`src/themes/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>theme<span class=\\\"token punctuation\\\">.</span>classic<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">getTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'classic'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>module <span class=\\\"token operator\\\">=></span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>theme<span class=\\\"token punctuation\\\">.</span>modern<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token function\\\">getTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'modern'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>module <span class=\\\"token operator\\\">=></span> module<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">applyTheme</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>在webpack解析到<code class=\\\"language-text\\\">import(src/themes/)</code>这样的按路径异步引入时，会把文件夹下的所有JS文件分别打包成独立的Chunk文件</p>\\n<h3>CSS分片</h3>\\n<p>Webpack 4 开始也支持css文件的分片了，具体可见 mini-extract-css-plugin</p>\",\"frontmatter\":{\"title\":\"代码分片的常见场景\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"August 06, 2018\"}}},\"pathContext\":{\"slug\":\"/代码分片的常见场景/\",\"previous\":{\"fields\":{\"slug\":\"/Ploymer入门/\"},\"frontmatter\":{\"path\":\"/polymer-introduction\",\"title\":\"Ploymer入门\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/用Canvas实现简单的天气效果/\"},\"frontmatter\":{\"path\":\"/simple-weather-effect-with-canvas\",\"title\":\"用Canvas实现简单的天气效果\",\"tags\":null,\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/代码分片的常见场景.json\n// module id = 477\n// module chunks = 101225518726340"],"sourceRoot":""}