{"version":3,"sources":["webpack:///path---数据库分类笔记-368c3acc32273a1a4362.js","webpack:///./.cache/json/数据库分类笔记.json"],"names":["webpackJsonp","518","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,sFAAAC,KAAA,mqEAAAC,aAAoxEL,MAAA,UAAAM,KAAA,KAAAC,YAAA,MAAAC,KAAA,mBAA2EC,aAAgBC,KAAA,YAAAC,UAA+BC,QAAUF,KAAA,cAAoBL,aAAgBQ,KAAA,4BAAAb,MAAA,WAAAM,MAAA,MAAAC,YAAA,QAAyFO,MAASF,QAAUF,KAAA,yBAA+BL,aAAgBQ,KAAA,wCAAAb,MAAA,sBAAAM,MAAA,cAAAC,YAAA","file":"path---数据库分类笔记-368c3acc32273a1a4362.js","sourcesContent":["webpackJsonp([35772239031730],{\n\n/***/ 518:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/数据库分类笔记.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>数据库是指按照一定的数据结构来组织、存储数据的一个容器，我们可以通过数据库提供的多种方式来管理数据库里的数据，现在数据库的种类越来越多，在此总结下常见数据库的分类</p>\\n<h3>关系型数据库</h3>\\n<p>最早数据库理论里，比较流行的数据库模型有三种，分别为层次式数据库、网络式数据库和关系型数据库（前两者已经基本消失），而当今的互联网中，最常用的数据库模型主要是两种，即关系型数据库和非关系型数据库</p>\\n<p>关系型数据库模型是把复杂的数据结构归结为简单的二元关系（即二维表格形式），在关系数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联表的表格分类、合并、连接或选取等运算来实现数据的管理</p>\\n<p>市场占有量最大的关系型数据库是MySQL和Oracle数据库，MySQL是开源的数据库，被Oracle重金收购后，社区推出了MariaDB作为防止MySQL闭源的分支，完全兼容MySQL，其他产品还有比如Access、SQL Server 和 PostgreSQL等</p>\\n<p>关系型数据库的事务必须具备ACID特性：</p>\\n<ul>\\n<li>Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节，事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简</li>\\n<li>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏，这表示写入的内容必须完全符合所有的预设约束、触发器和级联回滚等</li>\\n<li>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</li>\\n<li>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\\n</ul>\\n<h3>非关系型数据库</h3>\\n<p>非关系型数据库也被称为NoSQL数据库，是传统关系型数据库的一个有效补充，NoSQL的本意是“Not Only SQL”，指的是非关系型数据库，而不是没有SQL语句，NoSQL数据库在特定的场景下可以发挥出难以想象的高效率和高性能</p>\\n<p>传统的关系型数据库IO瓶颈、性能瓶颈都难以有效突破，于是开始出现了大批针对特定场景，以高性能和使用便利为目的的功能特异化的数据库产品，NoSQL（非关系型）类的数据库就是在这样的情景中诞生</p>\\n<p>NoSQL不将数据的一致性作为重点，或者是作为次重点</p>\\n<p>NoSQL数据存储不需要固定的表结构，通常也不存在连接操作，在大数据存取上具备关系型数据库无法比拟的性能优势，当今的应用体系结构越来越需要数据存储在横向伸缩性上能够满足需求</p>\\n<p>memcached（纯内存），redis（持久化缓存），mongodb（面向文档）</p>\\n<h3>非关系型数据库种类</h3>\\n<p><strong>键值（Key-Value）型数据库</strong> </p>\\n<p>键值数据库就类似哈希表，通过key来添加、查询或者删除数据，因为使用key主键访问，所以会获得很高的性能及扩展性，对于IT系统来说的优势在于简单、易部署、高并发。</p>\\n<p>典型产品：Memcached、Redis、MemcacheDB、Berkeley DB</p>\\n<p><strong>列存储（Column-oriented）型数据库</strong> </p>\\n<p>列存储数据库将数据存在列族（column family）中，一个列族存储经常被一起查询的相关数据，比如姓名和年龄可以放入一个列族中，而薪资则在另外一个列族中</p>\\n<p>这类数据库通常是用来应对分布式存储的海量数据</p>\\n<p>典型产品：Hbase、Cassandra</p>\\n<p><strong>面向文档型数据库</strong> </p>\\n<p>文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高</p>\\n<p>面向文档数据库会将数据以文档的形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合，数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或者JSONB等多种形式存储</p>\\n<p>典型产品：MongoDB、CouchDB</p>\\n<p><strong>图形数据库</strong> </p>\\n<p>图形数据库允许我们将数据已图的方式存储。实体会被作为定点，而实体之间的关系则会被作为边</p>\\n<p>图形结构的数据库使用灵活的图形模型，并且能扩展到多个服务器上</p>\\n<p>典型的产品有：Neo4J、InfoGrid</p>\\n<h2></h2>\",\"frontmatter\":{\"title\":\"数据库分类笔记\",\"tags\":null,\"categories\":[\"编程\"],\"date\":\"July 20, 2017\"}}},\"pathContext\":{\"slug\":\"/数据库分类笔记/\",\"previous\":{\"fields\":{\"slug\":\"/网站性能优化总结/\"},\"frontmatter\":{\"path\":\"/site-performance-summary\",\"title\":\"网站性能优化总结\",\"tags\":[\"性能\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/Javascript中的行为类设计模式/\"},\"frontmatter\":{\"path\":\"/javascript-behavioral-design-pattern\",\"title\":\"Javascript中的行为类设计模式\",\"tags\":[\"javascript\"],\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---数据库分类笔记-368c3acc32273a1a4362.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/数据库分类笔记.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>数据库是指按照一定的数据结构来组织、存储数据的一个容器，我们可以通过数据库提供的多种方式来管理数据库里的数据，现在数据库的种类越来越多，在此总结下常见数据库的分类</p>\\n<h3>关系型数据库</h3>\\n<p>最早数据库理论里，比较流行的数据库模型有三种，分别为层次式数据库、网络式数据库和关系型数据库（前两者已经基本消失），而当今的互联网中，最常用的数据库模型主要是两种，即关系型数据库和非关系型数据库</p>\\n<p>关系型数据库模型是把复杂的数据结构归结为简单的二元关系（即二维表格形式），在关系数据库中，对数据的操作几乎全部建立在一个或多个关系表格上，通过对这些关联表的表格分类、合并、连接或选取等运算来实现数据的管理</p>\\n<p>市场占有量最大的关系型数据库是MySQL和Oracle数据库，MySQL是开源的数据库，被Oracle重金收购后，社区推出了MariaDB作为防止MySQL闭源的分支，完全兼容MySQL，其他产品还有比如Access、SQL Server 和 PostgreSQL等</p>\\n<p>关系型数据库的事务必须具备ACID特性：</p>\\n<ul>\\n<li>Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节，事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简</li>\\n<li>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏，这表示写入的内容必须完全符合所有的预设约束、触发器和级联回滚等</li>\\n<li>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）</li>\\n<li>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\\n</ul>\\n<h3>非关系型数据库</h3>\\n<p>非关系型数据库也被称为NoSQL数据库，是传统关系型数据库的一个有效补充，NoSQL的本意是“Not Only SQL”，指的是非关系型数据库，而不是没有SQL语句，NoSQL数据库在特定的场景下可以发挥出难以想象的高效率和高性能</p>\\n<p>传统的关系型数据库IO瓶颈、性能瓶颈都难以有效突破，于是开始出现了大批针对特定场景，以高性能和使用便利为目的的功能特异化的数据库产品，NoSQL（非关系型）类的数据库就是在这样的情景中诞生</p>\\n<p>NoSQL不将数据的一致性作为重点，或者是作为次重点</p>\\n<p>NoSQL数据存储不需要固定的表结构，通常也不存在连接操作，在大数据存取上具备关系型数据库无法比拟的性能优势，当今的应用体系结构越来越需要数据存储在横向伸缩性上能够满足需求</p>\\n<p>memcached（纯内存），redis（持久化缓存），mongodb（面向文档）</p>\\n<h3>非关系型数据库种类</h3>\\n<p><strong>键值（Key-Value）型数据库</strong> </p>\\n<p>键值数据库就类似哈希表，通过key来添加、查询或者删除数据，因为使用key主键访问，所以会获得很高的性能及扩展性，对于IT系统来说的优势在于简单、易部署、高并发。</p>\\n<p>典型产品：Memcached、Redis、MemcacheDB、Berkeley DB</p>\\n<p><strong>列存储（Column-oriented）型数据库</strong> </p>\\n<p>列存储数据库将数据存在列族（column family）中，一个列族存储经常被一起查询的相关数据，比如姓名和年龄可以放入一个列族中，而薪资则在另外一个列族中</p>\\n<p>这类数据库通常是用来应对分布式存储的海量数据</p>\\n<p>典型产品：Hbase、Cassandra</p>\\n<p><strong>面向文档型数据库</strong> </p>\\n<p>文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高</p>\\n<p>面向文档数据库会将数据以文档的形式存储。每个文档都是自包含的数据单元，是一系列数据项的集合，数据存储的最小单位是文档，同一个表中存储的文档属性可以是不同的，数据可以使用XML、JSON或者JSONB等多种形式存储</p>\\n<p>典型产品：MongoDB、CouchDB</p>\\n<p><strong>图形数据库</strong> </p>\\n<p>图形数据库允许我们将数据已图的方式存储。实体会被作为定点，而实体之间的关系则会被作为边</p>\\n<p>图形结构的数据库使用灵活的图形模型，并且能扩展到多个服务器上</p>\\n<p>典型的产品有：Neo4J、InfoGrid</p>\\n<h2></h2>\",\"frontmatter\":{\"title\":\"数据库分类笔记\",\"tags\":null,\"categories\":[\"编程\"],\"date\":\"July 20, 2017\"}}},\"pathContext\":{\"slug\":\"/数据库分类笔记/\",\"previous\":{\"fields\":{\"slug\":\"/网站性能优化总结/\"},\"frontmatter\":{\"path\":\"/site-performance-summary\",\"title\":\"网站性能优化总结\",\"tags\":[\"性能\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/Javascript中的行为类设计模式/\"},\"frontmatter\":{\"path\":\"/javascript-behavioral-design-pattern\",\"title\":\"Javascript中的行为类设计模式\",\"tags\":[\"javascript\"],\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/数据库分类笔记.json\n// module id = 518\n// module chunks = 35772239031730"],"sourceRoot":""}