{"version":3,"sources":["webpack:///path---性能问题排查-bind-this-0e5e1c50e4a618546fec.js","webpack:///./.cache/json/性能问题排查-bind-this.json"],"names":["webpackJsonp","517","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,iGAAAC,KAAA,m0DAAoiDC,aAAmdL,MAAA,qBAAAM,MAAA,cAAAC,YAAA,MAAAC,KAAA,qBAAkGC,aAAgBC,KAAA,uBAAAC,UAA0CC,QAAUF,KAAA,sBAA4BL,aAAgBQ,KAAA,qCAAAb,MAAA,mBAAAM,MAAA,cAAAC,YAAA,QAAkHO,MAASF,QAAUF,KAAA,cAAoBL,aAAgBQ,KAAA,mCAAAb,MAAA,WAAAM,MAAA,MAAAC,YAAA","file":"path---性能问题排查-bind-this-0e5e1c50e4a618546fec.js","sourcesContent":["webpackJsonp([203727355493714],{\n\n/***/ 517:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/性能问题排查: bind(this).md absPath of file >>> MarkdownRemark\",\"html\":\"<p>在之前的博客里我提到过用Canvas实现天气效果，后面我偶然用Chrome的Performance Monitor查看这个页面的内存情况，发现切换几次天气后，CPU占用率从20%升到了90%，断定有性能效果，初步猜测是有内部自动GC没有成功</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/performance-bind-this.png\\\" alt=\\\"perf monitor\\\"></p>\\n<p>可以看到内存占用并没有什么变化，也就是说并不是粒子的对象没有被回收的问题，不然应该也会有出现内存阶梯上升的情况，从 Rendering - FPS Meter上也可以看到切换几次天气之后，出现了掉帧的情况，它是发现动画性能问题的最简单直观的工具</p>\\n<p>确定问题存在以后，还是搬出万能的帧分析工具，通过Performance录制切换动画效果的那10秒时，具体看看每一帧里做的事情是否有不同</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/function-call-problem.png\\\" alt=\\\"Perf Record\\\"></p>\\n<p>可以看到，切换了四种天气后，每种天气的paint方法还在执行，问题也就归咎到了这两行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>paint <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>paint<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">requestAnimationFrame</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>paint<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>paint方法作为requestAnimationFrame的回调，其实相当于被引用到了全局作用域，因此在切换天气，也即创建新的天气实例的时候，要显式地进行引用清除来保证GC的正常工作，我增加一个destroy方法和destroyed属性，打断了requestAnimationFrame的循环调用</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/perf-result.png\\\" alt=\\\"perf result\\\"></p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/perf-result-2.png\\\" alt=\\\"perf result\\\"></p>\\n<p>可以看到效果马上回到的理论上的合理范围，在CPU占用低的同时保证了完美的60FPS</p>\",\"frontmatter\":{\"title\":\"性能问题排查: bind(this)\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"August 21, 2018\"}}},\"pathContext\":{\"slug\":\"/性能问题排查: bind(this)/\",\"previous\":{\"fields\":{\"slug\":\"/用Canvas实现简单的天气效果/\"},\"frontmatter\":{\"path\":\"/simple-weather-effect-with-canvas\",\"title\":\"用Canvas实现简单的天气效果\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/常见架构模式笔记/\"},\"frontmatter\":{\"path\":\"/10-common-architecture-patterns\",\"title\":\"常见架构模式笔记\",\"tags\":[\"架构\"],\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---性能问题排查-bind-this-0e5e1c50e4a618546fec.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/性能问题排查: bind(this).md absPath of file >>> MarkdownRemark\",\"html\":\"<p>在之前的博客里我提到过用Canvas实现天气效果，后面我偶然用Chrome的Performance Monitor查看这个页面的内存情况，发现切换几次天气后，CPU占用率从20%升到了90%，断定有性能效果，初步猜测是有内部自动GC没有成功</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/performance-bind-this.png\\\" alt=\\\"perf monitor\\\"></p>\\n<p>可以看到内存占用并没有什么变化，也就是说并不是粒子的对象没有被回收的问题，不然应该也会有出现内存阶梯上升的情况，从 Rendering - FPS Meter上也可以看到切换几次天气之后，出现了掉帧的情况，它是发现动画性能问题的最简单直观的工具</p>\\n<p>确定问题存在以后，还是搬出万能的帧分析工具，通过Performance录制切换动画效果的那10秒时，具体看看每一帧里做的事情是否有不同</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/function-call-problem.png\\\" alt=\\\"Perf Record\\\"></p>\\n<p>可以看到，切换了四种天气后，每种天气的paint方法还在执行，问题也就归咎到了这两行：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>paint <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>paint<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">requestAnimationFrame</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>paint<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>paint方法作为requestAnimationFrame的回调，其实相当于被引用到了全局作用域，因此在切换天气，也即创建新的天气实例的时候，要显式地进行引用清除来保证GC的正常工作，我增加一个destroy方法和destroyed属性，打断了requestAnimationFrame的循环调用</p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/perf-result.png\\\" alt=\\\"perf result\\\"></p>\\n<p><img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/perf-result-2.png\\\" alt=\\\"perf result\\\"></p>\\n<p>可以看到效果马上回到的理论上的合理范围，在CPU占用低的同时保证了完美的60FPS</p>\",\"frontmatter\":{\"title\":\"性能问题排查: bind(this)\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"August 21, 2018\"}}},\"pathContext\":{\"slug\":\"/性能问题排查: bind(this)/\",\"previous\":{\"fields\":{\"slug\":\"/用Canvas实现简单的天气效果/\"},\"frontmatter\":{\"path\":\"/simple-weather-effect-with-canvas\",\"title\":\"用Canvas实现简单的天气效果\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/常见架构模式笔记/\"},\"frontmatter\":{\"path\":\"/10-common-architecture-patterns\",\"title\":\"常见架构模式笔记\",\"tags\":[\"架构\"],\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/性能问题排查-bind-this.json\n// module id = 517\n// module chunks = 203727355493714"],"sourceRoot":""}