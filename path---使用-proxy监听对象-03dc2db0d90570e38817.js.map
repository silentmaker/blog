{"version":3,"sources":["webpack:///path---使用-proxy监听对象-03dc2db0d90570e38817.js","webpack:///./.cache/json/使用-proxy监听对象.json"],"names":["webpackJsonp","478","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,0FAAAC,KAAA,uxXAAqxYC,aAA+HL,MAAA,cAAAM,MAAA,cAAAC,YAAA,MAAAC,KAAA,kBAAwFC,aAAgBC,KAAA,gBAAAC,UAAmCC,QAAUF,KAAA,aAAmBL,aAAgBQ,KAAA,sBAAAb,MAAA,UAAAM,KAAA,KAAAC,YAAA,QAAgFO,MAASF,QAAUF,KAAA,sBAA4BL,aAAgBQ,KAAA,sBAAAb,MAAA,iBAAAM,MAAA,cAAAC,YAAA","file":"path---使用-proxy监听对象-03dc2db0d90570e38817.js","sourcesContent":["webpackJsonp([128375948582264],{\n\n/***/ 478:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/使用Proxy监听对象.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Proxy是一种特殊对象，可以用于代理其他对象的操作，或者说拦截了对其他对象的操作，从而可以实现对对象的监听，添加自定义逻辑，或者进行日志记录或者性能测试等操作</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"elvin\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> agent <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'reading'</span><span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> key <span class=\\\"token keyword\\\">in</span> target <span class=\\\"token operator\\\">?</span> target<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'404'</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'writing'</span><span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        target<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Proxy可以代理以下事件：</p>\\n<ul>\\n<li>apply，当调用函数的时候激活</li>\\n<li>construct，当通过 new 操作符调用函数的时候激活</li>\\n<li>get/set，当读写属性的时候激活</li>\\n<li>enumerate，出现在for…in循环中的时候激活</li>\\n<li>getPrototypeOf/setPrototypeOf，当读写原型的时候激活</li>\\n</ul>\\n<p>不过有些操作是不能覆盖的，比如使用 ===/==，instanceof/typeof 等操作符的时候</p>\\n<h5>性能监控</h5>\\n<p>我们可以通过 Proxy 来复写函数，来记录调用的时间消耗：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isPrime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断素数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nisPrime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span>isPrime<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    apply<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">time</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"isPrime\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> target<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">timeEnd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"isPrime\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">isPrime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123124545</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>自动生成嵌套</h3>\\n<p>假设我们要在一个空对象里给一个多层嵌套的属性赋值，通常我们会用reduce方法写一个deepSet之类的方法，但通过Proxy，我们可以得到一个本身就直接支持嵌套赋值的对象：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Folder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> property<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>property <span class=\\\"token keyword\\\">in</span> target<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                target<span class=\\\"token punctuation\\\">[</span>property<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Folder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> target<span class=\\\"token punctuation\\\">[</span>property<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> folder <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Folder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfolder<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">.</span>c<span class=\\\"token punctuation\\\">.</span>d<span class=\\\"token punctuation\\\">.</span>e <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'f'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>模拟负索引</h3>\\n<p>通过Proxy可以让数组支持负数的索引，让数组从后面往前面找值：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createNegativeArray</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Expected Array'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            index <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>index <span class=\\\"token comment\\\">// 把属性值转为数字</span>\\n            <span class=\\\"token keyword\\\">return</span> target<span class=\\\"token punctuation\\\">[</span>index <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> index <span class=\\\"token punctuation\\\">:</span> target<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">+</span> index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            index <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>index <span class=\\\"token comment\\\">// 把属性值转为数字</span>\\n            target<span class=\\\"token punctuation\\\">[</span>index <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> index <span class=\\\"token punctuation\\\">:</span> target<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">+</span> index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>不过这样得到的数组在性能上，要比正常的数组慢一点，因为增加了Proxy拦截和索引计算的时间，如果频繁地读写数组，时间消耗可能会相差几倍</p>\",\"frontmatter\":{\"title\":\"使用Proxy监听对象\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"May 25, 2017\"}}},\"pathContext\":{\"slug\":\"/使用Proxy监听对象/\",\"previous\":{\"fields\":{\"slug\":\"/小程序基本原理/\"},\"frontmatter\":{\"path\":\"/mini-program-notes\",\"title\":\"小程序基本原理\",\"tags\":null,\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/React-Native入门笔记/\"},\"frontmatter\":{\"path\":\"/react-native-intro\",\"title\":\"React-Native入门\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---使用-proxy监听对象-03dc2db0d90570e38817.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/使用Proxy监听对象.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Proxy是一种特殊对象，可以用于代理其他对象的操作，或者说拦截了对其他对象的操作，从而可以实现对对象的监听，添加自定义逻辑，或者进行日志记录或者性能测试等操作</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> person <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"elvin\\\"</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> agent <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'reading'</span><span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> key <span class=\\\"token keyword\\\">in</span> target <span class=\\\"token operator\\\">?</span> target<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'404'</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'writing'</span><span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        target<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>Proxy可以代理以下事件：</p>\\n<ul>\\n<li>apply，当调用函数的时候激活</li>\\n<li>construct，当通过 new 操作符调用函数的时候激活</li>\\n<li>get/set，当读写属性的时候激活</li>\\n<li>enumerate，出现在for…in循环中的时候激活</li>\\n<li>getPrototypeOf/setPrototypeOf，当读写原型的时候激活</li>\\n</ul>\\n<p>不过有些操作是不能覆盖的，比如使用 ===/==，instanceof/typeof 等操作符的时候</p>\\n<h5>性能监控</h5>\\n<p>我们可以通过 Proxy 来复写函数，来记录调用的时间消耗：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isPrime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 判断素数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nisPrime <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span>isPrime<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    apply<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> thisArg<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">time</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"isPrime\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> target<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">timeEnd</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"isPrime\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> result<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token function\\\">isPrime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">123124545</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>自动生成嵌套</h3>\\n<p>假设我们要在一个空对象里给一个多层嵌套的属性赋值，通常我们会用reduce方法写一个deepSet之类的方法，但通过Proxy，我们可以得到一个本身就直接支持嵌套赋值的对象：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Folder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> property<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>property <span class=\\\"token keyword\\\">in</span> target<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                target<span class=\\\"token punctuation\\\">[</span>property<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Folder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> target<span class=\\\"token punctuation\\\">[</span>property<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> folder <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Folder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nfolder<span class=\\\"token punctuation\\\">.</span>a<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">.</span>c<span class=\\\"token punctuation\\\">.</span>d<span class=\\\"token punctuation\\\">.</span>e <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'f'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3>模拟负索引</h3>\\n<p>通过Proxy可以让数组支持负数的索引，让数组从后面往前面找值：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">createNegativeArray</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Expected Array'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Proxy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            index <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>index <span class=\\\"token comment\\\">// 把属性值转为数字</span>\\n            <span class=\\\"token keyword\\\">return</span> target<span class=\\\"token punctuation\\\">[</span>index <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> index <span class=\\\"token punctuation\\\">:</span> target<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">+</span> index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>target<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            index <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>index <span class=\\\"token comment\\\">// 把属性值转为数字</span>\\n            target<span class=\\\"token punctuation\\\">[</span>index <span class=\\\"token operator\\\">>=</span> <span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">?</span> index <span class=\\\"token punctuation\\\">:</span> target<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">+</span> index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>不过这样得到的数组在性能上，要比正常的数组慢一点，因为增加了Proxy拦截和索引计算的时间，如果频繁地读写数组，时间消耗可能会相差几倍</p>\",\"frontmatter\":{\"title\":\"使用Proxy监听对象\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"May 25, 2017\"}}},\"pathContext\":{\"slug\":\"/使用Proxy监听对象/\",\"previous\":{\"fields\":{\"slug\":\"/小程序基本原理/\"},\"frontmatter\":{\"path\":\"/mini-program-notes\",\"title\":\"小程序基本原理\",\"tags\":null,\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/React-Native入门笔记/\"},\"frontmatter\":{\"path\":\"/react-native-intro\",\"title\":\"React-Native入门\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/使用-proxy监听对象.json\n// module id = 478\n// module chunks = 128375948582264"],"sourceRoot":""}