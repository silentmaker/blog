{"version":3,"sources":["webpack:///path---业界观察-构建时预渲染-0206a31dd2ae9b6c8b48.js","webpack:///./.cache/json/业界观察-构建时预渲染.json"],"names":["webpackJsonp","474","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,4FAAAC,KAAA,q3CAAAC,aAAg/CL,MAAA,gBAAAM,MAAA,MAAAC,YAAA,MAAAC,KAAA,sBAAsFC,aAAgBC,KAAA,kBAAAC,UAAqCC,QAAUF,KAAA,qBAA2BL,aAAgBQ,KAAA,yCAAAb,MAAA,kBAAAM,MAAA,MAAAC,YAAA,QAA6GO,MAASF,QAAUF,KAAA,YAAkBL,aAAgBQ,KAAA,wBAAAb,MAAA,SAAAM,KAAA,KAAAC,YAAA","file":"path---业界观察-构建时预渲染-0206a31dd2ae9b6c8b48.js","sourcesContent":["webpackJsonp([269846667590160],{\n\n/***/ 474:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/业界观察 - 构建时预渲染.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>美团支付团队采用的优于CSR和SSR的页面方案，主要用于减少白屏时间，提高用户体验</p>\\n<h3>白屏原因</h3>\\n<p>浏览器渲染包含 HTML 解析、DOM 树构建、CSSOM 构建、JavaScript 解析、布局、绘制等等：</p>\\n<ol>\\n<li>等待 HTML 文档返回，此时处于白屏状态</li>\\n<li>对 HTML 文档解析完成后进行首屏渲染，因为项目中对加了灰色的背景色，因此呈现出灰屏</li>\\n<li>进行文件加载、JS 解析等过程，导致界面长时间出于灰屏中</li>\\n<li>当 Vue 实例触发了 mounted 后，界面显示出大体框架</li>\\n<li>调用 API 获取到时机业务数据后才能展示出最终的页面内容</li>\\n</ol>\\n<p>由此得出结论，因为要等待文件加载、CSSOM 构建、JS 解析等过程，而这些过程比较耗时，导致用户会长时间出于不可交互的首屏灰白屏状态，从而给用户一种网页很“慢”的感觉，页面每慢1秒造成页面 PV 降低11%，用户满意度也随之降低降低16%，近半数移动用户因为在10秒内仍未打开页面从而放弃</p>\\n<h3>构建时预渲染方案</h3>\\n<p>由于 SPA 可以由多个路由构成，需要根据业务场景决定哪些路由需要用到预渲染。因此需要配置读取的过程，用于告知编译器需要进行预渲染的路由，然后需要在发布机上启动模拟的浏览器环境，并通过预渲染的mounted事件钩子获取当前的页面内容，生成最终的 HTML 文件，方案用的是phantomjs-prebuilt，当时还没有 Headless Chrome、 Puppeteer、Prerender SPA Plugin等</p>\\n<p>假设本次修改了静态文件中的一个 JS 文件，这个文件会通过 CDN 方式在 HTML 里引用，那么最终在\\nHTML 文档中的引用方式是 <script src=\\\"http://cdn.com/index.js\\\"></script> 。然而由于项目还\\n没有上线，所以其实通过完整 URL 的方式是获取不到这个文件的；而预渲染的构建又是在上线动作之\\n前，所以问题就产生了：</p>\\n<p>构建时预渲染无法正常获取文件，因为项目还没有上线，有些文件引用还不存在，导致编译报错 —— 采用请求劫持方案解决，预渲染要启动模拟的浏览器环境，根据 phantom 提供的 API，可以对发出的请求加以劫持，将获取 CDN 文件的请求劫持到本地，从而解决问题</p>\\n<h3>预渲染研发流程</h3>\\n<p>开发阶段：</p>\\n<ul>\\n<li>通过 TypeScript 的装饰器单行引入预渲染构建触发的方法</li>\\n<li>发布前修改编译构建的配置文件</li>\\n</ul>\\n<p>发布阶段：</p>\\n<ul>\\n<li>先进行常规的项目构建</li>\\n<li>若有预渲染相关配置，则触发预渲染构建</li>\\n<li>通过预渲染得到最终的文件，并完成发布上线动作</li>\\n</ul>\\n<p>完整的用户请求路径如下：\\n<img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/pre-ssr-pattern.png\\\"></p>\",\"frontmatter\":{\"title\":\"业界观察 - 构建时预渲染\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"January 21, 2019\"}}},\"pathContext\":{\"slug\":\"/业界观察 - 构建时预渲染/\",\"previous\":{\"fields\":{\"slug\":\"/业界观察 - 增量更新静态资源/\"},\"frontmatter\":{\"path\":\"/industry-pratice-incremental-updating\",\"title\":\"业界观察 - 增量更新静态资源\",\"tags\":[\"前端\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/迷你项目汇总/\"},\"frontmatter\":{\"path\":\"/mini-program-summary\",\"title\":\"迷你项目汇总\",\"tags\":null,\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---业界观察-构建时预渲染-0206a31dd2ae9b6c8b48.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/业界观察 - 构建时预渲染.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>美团支付团队采用的优于CSR和SSR的页面方案，主要用于减少白屏时间，提高用户体验</p>\\n<h3>白屏原因</h3>\\n<p>浏览器渲染包含 HTML 解析、DOM 树构建、CSSOM 构建、JavaScript 解析、布局、绘制等等：</p>\\n<ol>\\n<li>等待 HTML 文档返回，此时处于白屏状态</li>\\n<li>对 HTML 文档解析完成后进行首屏渲染，因为项目中对加了灰色的背景色，因此呈现出灰屏</li>\\n<li>进行文件加载、JS 解析等过程，导致界面长时间出于灰屏中</li>\\n<li>当 Vue 实例触发了 mounted 后，界面显示出大体框架</li>\\n<li>调用 API 获取到时机业务数据后才能展示出最终的页面内容</li>\\n</ol>\\n<p>由此得出结论，因为要等待文件加载、CSSOM 构建、JS 解析等过程，而这些过程比较耗时，导致用户会长时间出于不可交互的首屏灰白屏状态，从而给用户一种网页很“慢”的感觉，页面每慢1秒造成页面 PV 降低11%，用户满意度也随之降低降低16%，近半数移动用户因为在10秒内仍未打开页面从而放弃</p>\\n<h3>构建时预渲染方案</h3>\\n<p>由于 SPA 可以由多个路由构成，需要根据业务场景决定哪些路由需要用到预渲染。因此需要配置读取的过程，用于告知编译器需要进行预渲染的路由，然后需要在发布机上启动模拟的浏览器环境，并通过预渲染的mounted事件钩子获取当前的页面内容，生成最终的 HTML 文件，方案用的是phantomjs-prebuilt，当时还没有 Headless Chrome、 Puppeteer、Prerender SPA Plugin等</p>\\n<p>假设本次修改了静态文件中的一个 JS 文件，这个文件会通过 CDN 方式在 HTML 里引用，那么最终在\\nHTML 文档中的引用方式是 <script src=\\\"http://cdn.com/index.js\\\"></script> 。然而由于项目还\\n没有上线，所以其实通过完整 URL 的方式是获取不到这个文件的；而预渲染的构建又是在上线动作之\\n前，所以问题就产生了：</p>\\n<p>构建时预渲染无法正常获取文件，因为项目还没有上线，有些文件引用还不存在，导致编译报错 —— 采用请求劫持方案解决，预渲染要启动模拟的浏览器环境，根据 phantom 提供的 API，可以对发出的请求加以劫持，将获取 CDN 文件的请求劫持到本地，从而解决问题</p>\\n<h3>预渲染研发流程</h3>\\n<p>开发阶段：</p>\\n<ul>\\n<li>通过 TypeScript 的装饰器单行引入预渲染构建触发的方法</li>\\n<li>发布前修改编译构建的配置文件</li>\\n</ul>\\n<p>发布阶段：</p>\\n<ul>\\n<li>先进行常规的项目构建</li>\\n<li>若有预渲染相关配置，则触发预渲染构建</li>\\n<li>通过预渲染得到最终的文件，并完成发布上线动作</li>\\n</ul>\\n<p>完整的用户请求路径如下：\\n<img src=\\\"/Users/maxingcong/Code/blog/src/pages/images/pre-ssr-pattern.png\\\"></p>\",\"frontmatter\":{\"title\":\"业界观察 - 构建时预渲染\",\"tags\":[\"前端\"],\"categories\":[\"编程\"],\"date\":\"January 21, 2019\"}}},\"pathContext\":{\"slug\":\"/业界观察 - 构建时预渲染/\",\"previous\":{\"fields\":{\"slug\":\"/业界观察 - 增量更新静态资源/\"},\"frontmatter\":{\"path\":\"/industry-pratice-incremental-updating\",\"title\":\"业界观察 - 增量更新静态资源\",\"tags\":[\"前端\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/迷你项目汇总/\"},\"frontmatter\":{\"path\":\"/mini-program-summary\",\"title\":\"迷你项目汇总\",\"tags\":null,\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/业界观察-构建时预渲染.json\n// module id = 474\n// module chunks = 269846667590160"],"sourceRoot":""}