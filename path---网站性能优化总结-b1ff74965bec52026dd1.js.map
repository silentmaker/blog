{"version":3,"sources":["webpack:///path---网站性能优化总结-b1ff74965bec52026dd1.js","webpack:///./.cache/json/网站性能优化总结.json"],"names":["webpackJsonp","525","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,uFAAAC,KAAA,o0FAAAC,aAAs7FL,MAAA,WAAAM,MAAA,MAAAC,YAAA,MAAAC,KAAA,mBAA8EC,aAAgBC,KAAA,aAAAC,UAAgCC,QAAUF,KAAA,sBAA4BL,aAAgBQ,KAAA,sBAAAb,MAAA,iBAAAM,MAAA,cAAAC,YAAA,QAAiGO,MAASF,QAAUF,KAAA,sBAA4BL,aAAgBQ,KAAA,2BAAAb,MAAA,mBAAAM,MAAA,cAAAC,YAAA","file":"path---网站性能优化总结-b1ff74965bec52026dd1.js","sourcesContent":["webpackJsonp([21984445403115],{\n\n/***/ 525:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/网站性能优化总结.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>与性能相关的事情不应该拖到项目的最后来做，要在项目的设计之初就开始考虑，这样才可以使性能的各种隐形需求完美地整合到项目中，随着项目一起推进</p>\\n<p>前端是庞大的，包括 HTML、CSS、 Javascript、Image 和 Font等等各种各样的资源，所以前端优化是复杂的，针对不同资源有不同的方式</p>\\n<p>从用户角度而言，优化的目的是让页面加载得更快和对用户的操作响应得更及时，从而给用户更友好的体验</p>\\n<p>从开发者角度而言，优化能够减少页面请求数，或者减小请求带宽，从而节省可观的资源</p>\\n<p>前端优化按粒度大致可以分为三类：</p>\\n<ul>\\n<li>\\n<p>页面级别的优化，比如 HTTP请求数、脚本的无阻塞加载、内联脚本的位置优化等</p>\\n</li>\\n<li>\\n<p>服务器端优化，比如添加Expires或Cache-Control报文头等</p>\\n</li>\\n<li>\\n<p>代码优化，比如DOM操作优化、图片优化以及HTML结构优化等等</p>\\n</li>\\n</ul>\\n<h5>页面级别优化</h5>\\n<ul>\\n<li>减少 HTTP请求数</li>\\n</ul>\\n<p><strong>1）合并文件</strong> </p>\\n<p>很多浏览器都有最大并发请求数限制，可能通过将多个脚本文件全并为一个文件，将多个样式表文件合并为一个文件，以此来减少文件的下载次数，</p>\\n<p><strong>2）雪碧图</strong></p>\\n<p>通过把多个图片拼成一副图片，然后通过CSS来控制在具体显示，加载速度就会提到提高很多</p>\\n<p><strong>3）将外部脚本置底</strong></p>\\n<p>外链脚本在加载时却会阻塞其他资源，如果将脚本放在靠前的位置，会影响整个页面的加载速度从而影响用户体验。解决这一问题的方法有很多，而最简单可依赖的方法就是将脚本尽可能地往后挪，减少对并发下载的影响</p>\\n<p><strong>4）异步执行Inline脚本</strong></p>\\n<p>与外部脚本一样，inline脚本在执行的时候一样会阻塞并发请求，除此之外，由于浏览器在页面处理方面是单线程的，若inline脚本在页面渲染之前执行时，页面的渲染工作则会被推迟，因此建议将执行时间较长的inline脚本异步执行，异步的方式有很多种，例如，使用 script元素的defer 属性(存在兼容性问题)、使用setTimeout、或者 Web Workers来解决此类问题</p>\\n<p><strong>(Lazy Load)异步加载 Javascript</strong></p>\\n<p>越来越多的站点使用了流行的 Javascript框架，不过一个框架往往包括了很多的功能实现，这些功能并不是每一个页面都需要的，如果下载了不需要的脚本既浪费了带宽又浪费了执行花费的时间。目前的做法大概有两种，一种是为那些流量特别大的页面专门定制专用的mini版框架，另一种则是 Lazy Load，最初只加载核心模块，其他模块可以等到需要使用的时候才加载</p>\\n<p> <strong>将 CSS放在 HEAD中</strong> </p>\\n<p>如果将 CSS放在其他地方，浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕，除此之外，有些浏览器会在 CSS下载完成后才开始渲染页面，如果 CSS放在靠下的位置则会导致浏览器将渲染时间推迟</p>\\n<p><strong>异步请求 Callback</strong></p>\\n<p>在某些页面中可能存在这样一种需求，需要使用 script标签来异步的请求数据，但对页面的性能也是有影响的，即增加了页面首次加载的负担，推迟了 DOMLoaded和window.onload 事件的触发时机。如果时效性允许的话，可以考虑在 DOMLoaded事件触发的时候加载</p>\\n<p><strong>减少不必要的 HTTP跳转</strong> </p>\\n<p>对于以目录形式访问的 HTTP链接，很多人都会忽略链接最后是否带 ’/‘，假如你的服务器对此是区别对待的话，那么需要注意，这其中很可能隐藏了 301跳转，增加了多余请求。</p>\\n<p><strong>避免重复的资源请求</strong></p>\\n<p>这种情况主要是由于疏忽或页面由多个模块拼接而成，然后每个模块中请求了同样的资源时，会导致资源的重复请求</p>\\n<p><strong>减少cookie传输</strong></p>\\n<p>一方面，cookie包含在每次请求和响应中，太大的cookie会严重影响数据传输，因此哪些数据需要写入cookie需要慎重考虑，尽量减少cookie中传输的数据量，另一方面，对于某些静态资源的访问，如CSS、script等，发送cookie没有意义，可以考虑静态资源使用独立域名访问，避免请求静态资源时发送cookie，减少cookie传输次数</p>\\n<p><strong>减少iframe数量</strong></p>\\n<p>使用iframe要注意理解iframe的优缺点，优点包括有，用来加载速度较慢的内容，例如广告；安全沙箱保护，浏览器会对iframe中的内容进行安全控制；脚本可以并行下载</p>\\n<p>而缺点则是：即使iframe内容为空也消耗加载时间，以及会阻止页面加载。</p>\\n<h5>服务器端优化</h5>\\n<p><strong>使用CDN</strong></p>\\n<p>优化的黄金定律是，减少网页内容的下载时间，因此可以通过CDN(内容分发网络)来提高下载速度，如果网站上有大量的静态内容，且世界各地的用户都在访问，那CDN是必不可少的</p>\\n<p><strong>添加Expires 或Cache-Control报文头</strong></p>\\n<p>对于静态内容添加Expires，将静态内容设为很长时间以后过期，而对于动态内容可以应用合适的Cache-Control，让浏览器根据条件来发送请求</p>\\n<p><strong>Gzip压缩传输文件</strong></p>\\n<p>Gzip通常可以减少70%的文本内容的大小，包括脚本、样式表等文件，对图片的优化效果可能有时不明显，Gzip比deflate更高效，并且主流服务器都有相应的压缩支持模块，值得注意的是pdf文件本身已经压缩，gzip对其效果不大，而且会浪费CPU</p>\\n<p><strong>配置ETags</strong></p>\\n<p>Etag简单来说是通过一个文件版本标识使得服务器可以轻松判断该请求的内容是否有所更新，如果没有就回复304 (not modified)，从而避免下载整个文件</p>\",\"frontmatter\":{\"title\":\"网站性能优化总结\",\"tags\":[\"性能\"],\"categories\":[\"编程\"],\"date\":\"July 16, 2017\"}}},\"pathContext\":{\"slug\":\"/网站性能优化总结/\",\"previous\":{\"fields\":{\"slug\":\"/React-Native入门笔记/\"},\"frontmatter\":{\"path\":\"/react-native-intro\",\"title\":\"React-Native入门\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/一个极简的Promise垫片实现/\"},\"frontmatter\":{\"path\":\"/a-tiny-promise-polyfill\",\"title\":\"一个极简的Promise垫片实现\",\"tags\":[\"javascript\"],\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---网站性能优化总结-b1ff74965bec52026dd1.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/网站性能优化总结.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>与性能相关的事情不应该拖到项目的最后来做，要在项目的设计之初就开始考虑，这样才可以使性能的各种隐形需求完美地整合到项目中，随着项目一起推进</p>\\n<p>前端是庞大的，包括 HTML、CSS、 Javascript、Image 和 Font等等各种各样的资源，所以前端优化是复杂的，针对不同资源有不同的方式</p>\\n<p>从用户角度而言，优化的目的是让页面加载得更快和对用户的操作响应得更及时，从而给用户更友好的体验</p>\\n<p>从开发者角度而言，优化能够减少页面请求数，或者减小请求带宽，从而节省可观的资源</p>\\n<p>前端优化按粒度大致可以分为三类：</p>\\n<ul>\\n<li>\\n<p>页面级别的优化，比如 HTTP请求数、脚本的无阻塞加载、内联脚本的位置优化等</p>\\n</li>\\n<li>\\n<p>服务器端优化，比如添加Expires或Cache-Control报文头等</p>\\n</li>\\n<li>\\n<p>代码优化，比如DOM操作优化、图片优化以及HTML结构优化等等</p>\\n</li>\\n</ul>\\n<h5>页面级别优化</h5>\\n<ul>\\n<li>减少 HTTP请求数</li>\\n</ul>\\n<p><strong>1）合并文件</strong> </p>\\n<p>很多浏览器都有最大并发请求数限制，可能通过将多个脚本文件全并为一个文件，将多个样式表文件合并为一个文件，以此来减少文件的下载次数，</p>\\n<p><strong>2）雪碧图</strong></p>\\n<p>通过把多个图片拼成一副图片，然后通过CSS来控制在具体显示，加载速度就会提到提高很多</p>\\n<p><strong>3）将外部脚本置底</strong></p>\\n<p>外链脚本在加载时却会阻塞其他资源，如果将脚本放在靠前的位置，会影响整个页面的加载速度从而影响用户体验。解决这一问题的方法有很多，而最简单可依赖的方法就是将脚本尽可能地往后挪，减少对并发下载的影响</p>\\n<p><strong>4）异步执行Inline脚本</strong></p>\\n<p>与外部脚本一样，inline脚本在执行的时候一样会阻塞并发请求，除此之外，由于浏览器在页面处理方面是单线程的，若inline脚本在页面渲染之前执行时，页面的渲染工作则会被推迟，因此建议将执行时间较长的inline脚本异步执行，异步的方式有很多种，例如，使用 script元素的defer 属性(存在兼容性问题)、使用setTimeout、或者 Web Workers来解决此类问题</p>\\n<p><strong>(Lazy Load)异步加载 Javascript</strong></p>\\n<p>越来越多的站点使用了流行的 Javascript框架，不过一个框架往往包括了很多的功能实现，这些功能并不是每一个页面都需要的，如果下载了不需要的脚本既浪费了带宽又浪费了执行花费的时间。目前的做法大概有两种，一种是为那些流量特别大的页面专门定制专用的mini版框架，另一种则是 Lazy Load，最初只加载核心模块，其他模块可以等到需要使用的时候才加载</p>\\n<p> <strong>将 CSS放在 HEAD中</strong> </p>\\n<p>如果将 CSS放在其他地方，浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕，除此之外，有些浏览器会在 CSS下载完成后才开始渲染页面，如果 CSS放在靠下的位置则会导致浏览器将渲染时间推迟</p>\\n<p><strong>异步请求 Callback</strong></p>\\n<p>在某些页面中可能存在这样一种需求，需要使用 script标签来异步的请求数据，但对页面的性能也是有影响的，即增加了页面首次加载的负担，推迟了 DOMLoaded和window.onload 事件的触发时机。如果时效性允许的话，可以考虑在 DOMLoaded事件触发的时候加载</p>\\n<p><strong>减少不必要的 HTTP跳转</strong> </p>\\n<p>对于以目录形式访问的 HTTP链接，很多人都会忽略链接最后是否带 ’/‘，假如你的服务器对此是区别对待的话，那么需要注意，这其中很可能隐藏了 301跳转，增加了多余请求。</p>\\n<p><strong>避免重复的资源请求</strong></p>\\n<p>这种情况主要是由于疏忽或页面由多个模块拼接而成，然后每个模块中请求了同样的资源时，会导致资源的重复请求</p>\\n<p><strong>减少cookie传输</strong></p>\\n<p>一方面，cookie包含在每次请求和响应中，太大的cookie会严重影响数据传输，因此哪些数据需要写入cookie需要慎重考虑，尽量减少cookie中传输的数据量，另一方面，对于某些静态资源的访问，如CSS、script等，发送cookie没有意义，可以考虑静态资源使用独立域名访问，避免请求静态资源时发送cookie，减少cookie传输次数</p>\\n<p><strong>减少iframe数量</strong></p>\\n<p>使用iframe要注意理解iframe的优缺点，优点包括有，用来加载速度较慢的内容，例如广告；安全沙箱保护，浏览器会对iframe中的内容进行安全控制；脚本可以并行下载</p>\\n<p>而缺点则是：即使iframe内容为空也消耗加载时间，以及会阻止页面加载。</p>\\n<h5>服务器端优化</h5>\\n<p><strong>使用CDN</strong></p>\\n<p>优化的黄金定律是，减少网页内容的下载时间，因此可以通过CDN(内容分发网络)来提高下载速度，如果网站上有大量的静态内容，且世界各地的用户都在访问，那CDN是必不可少的</p>\\n<p><strong>添加Expires 或Cache-Control报文头</strong></p>\\n<p>对于静态内容添加Expires，将静态内容设为很长时间以后过期，而对于动态内容可以应用合适的Cache-Control，让浏览器根据条件来发送请求</p>\\n<p><strong>Gzip压缩传输文件</strong></p>\\n<p>Gzip通常可以减少70%的文本内容的大小，包括脚本、样式表等文件，对图片的优化效果可能有时不明显，Gzip比deflate更高效，并且主流服务器都有相应的压缩支持模块，值得注意的是pdf文件本身已经压缩，gzip对其效果不大，而且会浪费CPU</p>\\n<p><strong>配置ETags</strong></p>\\n<p>Etag简单来说是通过一个文件版本标识使得服务器可以轻松判断该请求的内容是否有所更新，如果没有就回复304 (not modified)，从而避免下载整个文件</p>\",\"frontmatter\":{\"title\":\"网站性能优化总结\",\"tags\":[\"性能\"],\"categories\":[\"编程\"],\"date\":\"July 16, 2017\"}}},\"pathContext\":{\"slug\":\"/网站性能优化总结/\",\"previous\":{\"fields\":{\"slug\":\"/React-Native入门笔记/\"},\"frontmatter\":{\"path\":\"/react-native-intro\",\"title\":\"React-Native入门\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/一个极简的Promise垫片实现/\"},\"frontmatter\":{\"path\":\"/a-tiny-promise-polyfill\",\"title\":\"一个极简的Promise垫片实现\",\"tags\":[\"javascript\"],\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/网站性能优化总结.json\n// module id = 525\n// module chunks = 21984445403115"],"sourceRoot":""}