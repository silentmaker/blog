{"version":3,"sources":["webpack:///path---javascript忍者禁术笔记-function-b5f3bccd56e43ed0f0b8.js","webpack:///./.cache/json/javascript忍者禁术笔记-function.json"],"names":["webpackJsonp","448","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","tags","categories","date","pathContext","slug","previous","fields","path","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,eAAAC,OAAA,aAA4CC,gBAAmBC,GAAA,wGAAAC,KAAA,i+TAA21UC,aAAiLL,MAAA,4BAAAM,MAAA,cAAAC,YAAA,MAAAC,KAAA,oBAAwGC,aAAgBC,KAAA,8BAAAC,UAAiDC,QAAUF,KAAA,8BAAoCL,aAAgBQ,KAAA,4BAAAb,MAAA,2BAAAM,MAAA,cAAAC,YAAA,QAAiHO,MAASF,QAAUF,KAAA,6BAAmCL,aAAgBQ,KAAA,2BAAAb,MAAA,0BAAAM,MAAA,cAAAC,YAAA","file":"path---javascript忍者禁术笔记-function-b5f3bccd56e43ed0f0b8.js","sourcesContent":["webpackJsonp([115002713898180],{\n\n/***/ 448:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/Javascript忍者禁术笔记-Function.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>函数的特性</h3>\\n<p>函数可以看作一种特殊的对象，可以赋值给变量，也可以作为同步或者异步的回调，同时也可以具有属性，可以记录执行的结果</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isPrime</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">)</span> isPrime<span class=\\\"token punctuation\\\">.</span>answers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> prime <span class=\\\"token operator\\\">=</span> value <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1不是素数</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> value<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">%</span> i <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            prime <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> prime<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 存储计算结果</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>创建函数的方法有很多，function声明、箭头函数、Function构造器、generator函数，函数可以作为其他函数的返回</p>\\n<h3>创建函数</h3>\\n<p>IIFE(Immediately Invoked Function Expression)，函数声明可以在创建后立即执行，形成匿名作用域</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">(function(val){})(value);</code></pre>\\n      </div>\\n<p>可以使用参数默认值，也可以使用解构符代表不定参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">multiMax</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>remain<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> sorted <span class=\\\"token operator\\\">=</span> remain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">return</span> b <span class=\\\"token operator\\\">-</span> a<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> first <span class=\\\"token operator\\\">*</span> sorted<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>调用函数</h3>\\n<p>调用函数有4种方式：</p>\\n<ol>\\n<li>直接调用func()</li>\\n<li>作为对象方法调用，如</li>\\n<li>作为constructor调用，比如，new Ninja()</li>\\n<li>通过apply/call调用，比如func.call(ninja)</li>\\n</ol>\\n<p>1的方式下this的指向一般是全局对象，如window或者global，2的情况下this指向调用方法的对象，而3的情况下，new操作符会导致生成一个空对象做为函数执行的上下文，4的方式则可以指定特定对象作为执行上下文，apply只接收两个参数，第二个参数是传入需调用函数的参数数组，而call接收不定个参数，第二个开始的参数作为调用函数的第一个开始的参数</p>\\n<h3>作用域链</h3>\\n<p>JS引擎如何追踪代码中的所有函数执行上下文和返回位置呢</p>\\n<p>首先代码可以会两种块，一种是全局代码，另一种是函数代码，因此执行环境也可以分成唯一的全局作用域和各个函数的内部作用域，然后通过调用栈来记录执行的环境和顺序，可以在断点调试的时候通过 Chrome Devtool 的 Source Panel 中的Call Stack来查看</p>\\n<p>不管函数的调用有几层嵌套，在JS引擎中都会形成最后一级的函数作用域到全局作用域的一个调用栈，形成了作用域链，因为JS是单线程的，因此在主线程上只会有一个Call Stack，如果递归函数的结束条件没有写好，会导到栈溢出</p>\\n<p>变量的查找也通过栈来完成，当前作用域中未找到声明的函数会一级级地沿作用域链向上查询，直到全局作用域</p>\\n<p><img src=\\\"F:%5Cprojects%5Cblog%5Csrc%5Cpages%5Cimages%5Cresolve-variable.png\\\" alt=\\\"Resolving Variables\\\"></p>\\n<h3>特殊函数 Generators</h3>\\n<p>generator是可以实现执行上下文暂停和恢复的一种特殊函数，调用generator，返回的是一个迭代器iterator，函数会执行至yield语句后暂停，下一次调用时又从暂停的地方开始执行，执行完最后的yield后的调用会返回undefined，generatora的函数声明使用function*</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 通过generator生成一系列值</span>\\n<span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">ValueGenerator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">\\\"b\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">\\\"c\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> val <span class=\\\"token keyword\\\">of</span> ValueGenerator<span class=\\\"token punctuation\\\">)</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>generator的原型上有next、send和close方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fibonacci</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">yield</span> a <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> it <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fibonacci</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>          <span class=\\\"token comment\\\">// \\\"Generator {  }\\\"</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 20</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// undefined</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 抛出StopIteration错误</span></code></pre>\\n      </div>\\n<p>genrator中，yield也可以返回promise，可以配合async/await来使用，实现复杂的异步控制流</p>\",\"frontmatter\":{\"title\":\"Javascript忍者禁术笔记-Function\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"April 13, 2017\"}}},\"pathContext\":{\"slug\":\"/Javascript忍者禁术笔记-Function/\",\"previous\":{\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Runtime/\"},\"frontmatter\":{\"path\":\"/javascript-ninja-runtime\",\"title\":\"Javascript忍者禁术笔记-Runtime\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Object/\"},\"frontmatter\":{\"path\":\"/javascript-ninja-object\",\"title\":\"Javascript忍者禁术笔记-Object\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript忍者禁术笔记-function-b5f3bccd56e43ed0f0b8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Elvin's Blog\",\"author\":\"Elvin Ma\"}},\"markdownRemark\":{\"id\":\"/Users/maxingcong/Code/blog/src/pages/Javascript忍者禁术笔记-Function.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>函数的特性</h3>\\n<p>函数可以看作一种特殊的对象，可以赋值给变量，也可以作为同步或者异步的回调，同时也可以具有属性，可以记录执行的结果</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">isPrime</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">)</span> isPrime<span class=\\\"token punctuation\\\">.</span>answers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">!==</span> undefined<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">var</span> prime <span class=\\\"token operator\\\">=</span> value <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1不是素数</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> value<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">%</span> i <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            prime <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> isPrime<span class=\\\"token punctuation\\\">.</span>answers<span class=\\\"token punctuation\\\">[</span>value<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> prime<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 存储计算结果</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>创建函数的方法有很多，function声明、箭头函数、Function构造器、generator函数，函数可以作为其他函数的返回</p>\\n<h3>创建函数</h3>\\n<p>IIFE(Immediately Invoked Function Expression)，函数声明可以在创建后立即执行，形成匿名作用域</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">(function(val){})(value);</code></pre>\\n      </div>\\n<p>可以使用参数默认值，也可以使用解构符代表不定参数</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">multiMax</span><span class=\\\"token punctuation\\\">(</span>first<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>remain<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> sorted <span class=\\\"token operator\\\">=</span> remain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">return</span> b <span class=\\\"token operator\\\">-</span> a<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> first <span class=\\\"token operator\\\">*</span> sorted<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>调用函数</h3>\\n<p>调用函数有4种方式：</p>\\n<ol>\\n<li>直接调用func()</li>\\n<li>作为对象方法调用，如</li>\\n<li>作为constructor调用，比如，new Ninja()</li>\\n<li>通过apply/call调用，比如func.call(ninja)</li>\\n</ol>\\n<p>1的方式下this的指向一般是全局对象，如window或者global，2的情况下this指向调用方法的对象，而3的情况下，new操作符会导致生成一个空对象做为函数执行的上下文，4的方式则可以指定特定对象作为执行上下文，apply只接收两个参数，第二个参数是传入需调用函数的参数数组，而call接收不定个参数，第二个开始的参数作为调用函数的第一个开始的参数</p>\\n<h3>作用域链</h3>\\n<p>JS引擎如何追踪代码中的所有函数执行上下文和返回位置呢</p>\\n<p>首先代码可以会两种块，一种是全局代码，另一种是函数代码，因此执行环境也可以分成唯一的全局作用域和各个函数的内部作用域，然后通过调用栈来记录执行的环境和顺序，可以在断点调试的时候通过 Chrome Devtool 的 Source Panel 中的Call Stack来查看</p>\\n<p>不管函数的调用有几层嵌套，在JS引擎中都会形成最后一级的函数作用域到全局作用域的一个调用栈，形成了作用域链，因为JS是单线程的，因此在主线程上只会有一个Call Stack，如果递归函数的结束条件没有写好，会导到栈溢出</p>\\n<p>变量的查找也通过栈来完成，当前作用域中未找到声明的函数会一级级地沿作用域链向上查询，直到全局作用域</p>\\n<p><img src=\\\"F:%5Cprojects%5Cblog%5Csrc%5Cpages%5Cimages%5Cresolve-variable.png\\\" alt=\\\"Resolving Variables\\\"></p>\\n<h3>特殊函数 Generators</h3>\\n<p>generator是可以实现执行上下文暂停和恢复的一种特殊函数，调用generator，返回的是一个迭代器iterator，函数会执行至yield语句后暂停，下一次调用时又从暂停的地方开始执行，执行完最后的yield后的调用会返回undefined，generatora的函数声明使用function*</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 通过generator生成一系列值</span>\\n<span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">ValueGenerator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">\\\"a\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">\\\"b\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">\\\"c\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> val <span class=\\\"token keyword\\\">of</span> ValueGenerator<span class=\\\"token punctuation\\\">)</span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>generator的原型上有next、send和close方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fibonacci</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">yield</span> a <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> it <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fibonacci</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>          <span class=\\\"token comment\\\">// \\\"Generator {  }\\\"</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 20</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// undefined</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>it<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\">// 抛出StopIteration错误</span></code></pre>\\n      </div>\\n<p>genrator中，yield也可以返回promise，可以配合async/await来使用，实现复杂的异步控制流</p>\",\"frontmatter\":{\"title\":\"Javascript忍者禁术笔记-Function\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"],\"date\":\"April 13, 2017\"}}},\"pathContext\":{\"slug\":\"/Javascript忍者禁术笔记-Function/\",\"previous\":{\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Runtime/\"},\"frontmatter\":{\"path\":\"/javascript-ninja-runtime\",\"title\":\"Javascript忍者禁术笔记-Runtime\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}},\"next\":{\"fields\":{\"slug\":\"/Javascript忍者禁术笔记-Object/\"},\"frontmatter\":{\"path\":\"/javascript-ninja-object\",\"title\":\"Javascript忍者禁术笔记-Object\",\"tags\":[\"Javascript\"],\"categories\":[\"编程\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript忍者禁术笔记-function.json\n// module id = 448\n// module chunks = 115002713898180"],"sourceRoot":""}